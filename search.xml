<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Medium | 非订阅下阅读文章</title>
    <url>/posts/40149/</url>
    <content><![CDATA[<p>在不用订阅的情况下，不受限制的阅读文章，我一般都是使用 PC 进行阅读，因为宽屏看东西，比较爽。<span id="more"></span>列举下方法</p>
<h3 id="1-chrome-使用无痕模式"><a href="#1-chrome-使用无痕模式" class="headerlink" title="1 chrome 使用无痕模式"></a>1 chrome 使用无痕模式</h3><p>复制链接地址到无痕窗口打开，即可正常阅读。</p>
<p>缺点：每次阅读文章都需要走这样一篇流程，有些浪费功夫，对于我这样的 <code>medium</code> 重度用户，心态是要崩掉的。但是如果只是偶尔阅读下，可以这样操作。</p>
<h3 id="2-使用插件：medium-unlimited"><a href="#2-使用插件：medium-unlimited" class="headerlink" title="2 使用插件：medium-unlimited"></a>2 使用插件：medium-unlimited</h3><p>地址：<a href="https://github.com/manojVivek/medium-unlimited">https://github.com/manojVivek/medium-unlimited</a></p>
<p>安装后，即可顺滑流畅的享受阅读。</p>
<p>缺点：受浏览器限制，其实这个也不算是什么缺点，毕竟 <code>chrome</code> 和 <code>firefox</code> 算是很不错的浏览器了。</p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>Medium</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac-解锁网易云置灰音乐</title>
    <url>/posts/41185/</url>
    <content><![CDATA[<p>我的网易云黑胶会员 VIP 到期了，暂时不想续期，找了个法子解锁置灰的歌，后面再想想续期的事情。解锁的原理比较简单，劫持网易云音乐客户端的请求，打到代理服务中去，代理服务会自动解析，如果有些歌听不了，会自动请求其他音源进行替换，这个大家都懂的。下面记录下步骤。<span id="more"></span></p>
<p>工具和对应的版本：</p>
<ul>
<li>网易云音乐 for mac：2.0.0 (690) 下载地址：<a href="http://d1.music.126.net/dmusic/NeteaseMusic_2.0.0_690_web.dmg">http://d1.music.126.net/dmusic/NeteaseMusic_2.0.0_690_web.dmg</a></li>
<li>mac: 10.15.5 (19F101)</li>
<li>node: v10.16.3</li>
<li>Proxifier for mac: v2.26 下载地址: <a href="https://xclient.info/s/proxifier.html">https://xclient.info/s/proxifier.html</a></li>
</ul>
<h3 id="1-下载解锁项目"><a href="#1-下载解锁项目" class="headerlink" title="1 下载解锁项目"></a>1 下载解锁项目</h3><p>Github：<a href="https://github.com/nondanee/UnblockNeteaseMusic">https://github.com/nondanee/UnblockNeteaseMusic</a></p>
<p>这里照着文档克隆，然后双击安装其中的 ca.crt 并设置信任。因为后面要跑服务，新建了 m.sh 并赋予可执行的权限，直接用 m.sh 代码如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">pattern=&#x27;[(].*[)]&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意这里改成自己的目录地址</span></span><br><span class="line">path=~/Documents/githubpro/UnblockNeteaseMusic/app.js</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里是获取 music.163.com 的 IP 地址</span></span><br><span class="line">ip=`ping music.163.com -c 1 | grep -o $pattern`</span><br><span class="line">ip=$&#123;ip:1&#125;</span><br><span class="line">ip=$&#123;ip%?&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里的端口号自己可以调整</span></span><br><span class="line">sudo node app.js -p 63455:7777 -f $ip</span><br></pre></td></tr></table></figure>

<p>然后在包含 m.sh 的目录下执行 m.sh</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./m.sh</span></span><br><span class="line"></span><br><span class="line">HTTP Server running @ http://0.0.0.0:63455</span><br><span class="line">HTTPS Server running @ http://0.0.0.0:7777</span><br></pre></td></tr></table></figure>

<p>注意：ping music.163.com 出来的 IP 地址有可能是变化的，so 如果歌听不了，重新运行服务即可。</p>
<h3 id="2-代理设置"><a href="#2-代理设置" class="headerlink" title="2 代理设置"></a>2 代理设置</h3><p>因为网易云 mac 的客户端没有可以设置代理的地方，有些傲娇，那就使用 Proxifier 来解决吧。</p>
<p>2.1 添加 Proxies，地址写 127.0.0.1 端口对应上面，为 63455<br>2.2 添加 Rules</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Applications 为 NeteaseMusic;com.apple.WebKit.Networking</span><br><span class="line"></span><br><span class="line">Target Hosts 为 *.music<span class="number">.163</span>.com;*.music<span class="number">.126</span>.net;*.netease.com;music<span class="number">.163</span>.com;interface.music<span class="number">.163</span>.com</span><br><span class="line"></span><br><span class="line">Action 为上面创建的，即 Proxy HTTPS <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">63455</span></span><br></pre></td></tr></table></figure>

<p>2.3 DNS 配置<br>在 Resolve hostnames through proxy 前面打勾</p>
<p>好了，代理配置好了。</p>
<h3 id="3-重启网易云音乐"><a href="#3-重启网易云音乐" class="headerlink" title="3 重启网易云音乐"></a>3 重启网易云音乐</h3><p>搜索 JAY 的歌，之前置灰的歌可以播放了，例如听以父之名，日志如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">TUNNEL &gt; localhost:63455</span><br><span class="line">MITM &gt; music.163.com</span><br><span class="line">MITM &gt; music.163.com</span><br><span class="line">[1400394244] 以父之名 (Live)</span><br><span class="line">http://sz.sycdn.kuwo.cn/cadd34fd7d42d643db5257b182f07ad5/5f57a6b9/resource/n1/69/17/1415834243.mp3</span><br><span class="line">MITM &gt; music.163.com</span><br></pre></td></tr></table></figure>

<p>使用这种方式听歌呢，因为要跑服务和代理，so 最好还是用脚本打开网易云音乐，省事。</p>
]]></content>
      <categories>
        <category>危险边缘</category>
      </categories>
      <tags>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>资源加速系列之 Github</title>
    <url>/posts/19128/</url>
    <content><![CDATA[<h3 id="1-故事发生背景"><a href="#1-故事发生背景" class="headerlink" title="1 故事发生背景"></a>1 故事发生背景</h3><p>这段时间，github 的 clone 快搞死人了，速度慢的一逼，上网看了几种方法<span id="more"></span></p>
<ol>
<li>改 hosts（亲测差异不大）</li>
<li>先拉到 gitee，再从 gitee 克隆</li>
<li>走代理</li>
</ol>
<p>我使用了代理，第二种方法不适合我，为什么，一个是自己懒，另外一个就是安装某些软件，这些软件特么的自己写死了 clone 地址（一般都是不能改的），所以果断抛弃，直奔第三种方式</p>
<h3 id="2-执行方法"><a href="#2-执行方法" class="headerlink" title="2 执行方法"></a>2 执行方法</h3><p><strong>走代理，你特么的需要个梯子呀</strong></p>
<p>我使用的是 ss 服务，看图说话</p>
<p><img src="/posts/19128/addGithubSpeed_ssproxy.png" alt="ssproxy.png"></p>
<p>很清晰，没毛病，然后进行下一步</p>
<p>不同的协议他的代理配置各不相同</p>
<ul>
<li><code>core.gitproxy</code>  用于  <code>git://</code>  协议</li>
<li><code>http.proxy</code>  用于  <code>http://</code>  协议</li>
<li><code>https.proxy</code>  用于  <code>https://</code>  协议</li>
</ul>
<p>全局设置 git 的配置</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"># 这里是针对 http 和 https 协议的</span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> http<span class="variable">.proxy</span> &#x27;socks5:<span class="comment">//127.0.0.1:1086&#x27;</span></span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> https<span class="variable">.proxy</span> &#x27;socks5:<span class="comment">//127.0.0.1:1086&#x27;</span></span><br><span class="line"></span><br><span class="line"># 这里是针对 git 协议的</span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> core<span class="variable">.gitproxy</span> <span class="string">&quot;git-proxy&quot;</span></span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> socks<span class="variable">.proxy</span> &#x27;socks5:<span class="comment">//127.0.0.1:1086&#x27;</span></span><br></pre></td></tr></table></figure>

<p>设置完后，看下 git 的全局配置 <code>git config --global --list</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user.name=xxxx</span><br><span class="line">user.email=xxxxx@gmail.com</span><br><span class="line">core.excludesfile=/Users/kycool/.gitignore_global</span><br><span class="line">core.gitproxy=git-proxy</span><br><span class="line">difftool.sourcetree.cmd=opendiff <span class="string">&quot;$LOCAL&quot;</span> <span class="string">&quot;$REMOTE&quot;</span></span><br><span class="line">difftool.sourcetree.path=</span><br><span class="line">mergetool.sourcetree.cmd=/Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh <span class="string">&quot;$LOCAL&quot;</span> <span class="string">&quot;$REMOTE&quot;</span> -ancestor <span class="string">&quot;$BASE&quot;</span> -merge <span class="string">&quot;$MERGED&quot;</span></span><br><span class="line">mergetool.sourcetree.trustexitcode=true</span><br><span class="line">commit.template=/Users/kycool/.stCommitMsg</span><br><span class="line">http.proxy=socks5://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">1086</span></span><br><span class="line">https.proxy=socks5://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">1086</span></span><br><span class="line">socks.proxy=socks5://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">1086</span></span><br></pre></td></tr></table></figure>

<p>如果后面想删掉这些配置，则可以执行以下命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git config --<span class="keyword">global</span> --unset 键</span><br></pre></td></tr></table></figure>

<p>添加 ssh 配置，在 <code>.ssh/config</code> 文件中添加</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">port <span class="number">22</span></span><br><span class="line">UseKeychain yes</span><br><span class="line">IdentityFile /Users/kycool/.ssh/id_rsa</span><br><span class="line">ProxyCommand nc -v -x <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">1086</span> %h %p</span><br></pre></td></tr></table></figure>

<p>好了，到享受的时候了，我测试了 git 协议和 https 协议</p>
<h3 id="3-克隆测试"><a href="#3-克隆测试" class="headerlink" title="3 克隆测试"></a>3 克隆测试</h3><p><strong>git 协议</strong>: clone antd-pro</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ git clone git@github.com:ant-design/ant-design-pro.git</span><br><span class="line">Cloning into <span class="string">&#x27;ant-design-pro&#x27;</span>...</span><br><span class="line">remote: Enumerating objects: <span class="number">31</span>, done.</span><br><span class="line">remote: Counting objects: <span class="number">100</span>% (<span class="number">31</span>/<span class="number">31</span>), done.</span><br><span class="line">remote: Compressing objects: <span class="number">100</span>% (<span class="number">29</span>/<span class="number">29</span>), done.</span><br><span class="line">remote: Total <span class="number">18085</span> (delta <span class="number">9</span>), reused <span class="number">14</span> (delta <span class="number">2</span>), pack-reused <span class="number">18054</span></span><br><span class="line">Receiving objects: <span class="number">100</span>% (<span class="number">18085</span>/<span class="number">18085</span>), <span class="number">6.02</span> MiB | <span class="number">299.00</span> KiB/s, done.</span><br><span class="line">Resolving deltas: <span class="number">100</span>% (<span class="number">12239</span>/<span class="number">12239</span>), done.</span><br></pre></td></tr></table></figure>

<p>从来没有见过的速度，几乎是秒杀</p>
<p><strong>https 协议</strong>: hexo init mm</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ hexo init mm</span><br><span class="line">INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git</span><br><span class="line">Cloning into <span class="string">&#x27;/Users/kycool/Documents/test/mm&#x27;</span>...</span><br><span class="line">remote: Enumerating objects: <span class="number">30</span>, done.</span><br><span class="line">remote: Counting objects: <span class="number">100</span>% (<span class="number">30</span>/<span class="number">30</span>), done.</span><br><span class="line">remote: Compressing objects: <span class="number">100</span>% (<span class="number">24</span>/<span class="number">24</span>), done.</span><br><span class="line">remote: Total <span class="number">161</span> (delta <span class="number">12</span>), reused <span class="number">12</span> (delta <span class="number">4</span>), pack-reused <span class="number">131</span></span><br><span class="line">Receiving objects: <span class="number">100</span>% (<span class="number">161</span>/<span class="number">161</span>), <span class="number">31.79</span> KiB | <span class="number">206.00</span> KiB/s, done.</span><br><span class="line">Resolving deltas: <span class="number">100</span>% (<span class="number">74</span>/<span class="number">74</span>), done.</span><br><span class="line">Submodule <span class="string">&#x27;themes/landscape&#x27;</span> (https://github.com/hexojs/hexo-theme-landscape.git) registered <span class="keyword">for</span> path <span class="string">&#x27;themes/landscape&#x27;</span></span><br><span class="line">Cloning into <span class="string">&#x27;/Users/kycool/Documents/test/mm/themes/landscape&#x27;</span>...</span><br><span class="line">remote: Enumerating objects: <span class="number">9</span>, done.</span><br><span class="line">remote: Counting objects: <span class="number">100</span>% (<span class="number">9</span>/<span class="number">9</span>), done.</span><br><span class="line">remote: Compressing objects: <span class="number">100</span>% (<span class="number">9</span>/<span class="number">9</span>), done.</span><br><span class="line">remote: Total <span class="number">1063</span> (delta <span class="number">1</span>), reused <span class="number">1</span> (delta <span class="number">0</span>), pack-reused <span class="number">1054</span></span><br><span class="line">Receiving objects: <span class="number">100</span>% (<span class="number">1063</span>/<span class="number">1063</span>), <span class="number">3.22</span> MiB | <span class="number">217.00</span> KiB/s, done.</span><br><span class="line">Resolving deltas: <span class="number">100</span>% (<span class="number">582</span>/<span class="number">582</span>), done.</span><br><span class="line">Submodule path <span class="string">&#x27;themes/landscape&#x27;</span>: checked out <span class="string">&#x27;73a23c51f8487cfcd7c6deec96ccc7543960d350&#x27;</span></span><br><span class="line">INFO  Install dependencies</span><br></pre></td></tr></table></figure>

<p>速度和上面一个几乎不相上下。</p>
<p>测试的速度是不断变化的，我观察有瞬间跑到 600 KiB&#x2F;s，我估摸着如果代理服务器的带宽牛逼的话，那速度想都不敢想。</p>
<h3 id="4-不足的地方"><a href="#4-不足的地方" class="headerlink" title="4 不足的地方"></a>4 不足的地方</h3><p>这里面的哪一种方法都是有些不足的，梯子偶尔也会抽风，因为是我买的别人家的服务，这种保障不能主观控制，抽风就回到解放前了。</p>
]]></content>
      <categories>
        <category>资源加速</category>
      </categories>
      <tags>
        <tag>加速</tag>
      </tags>
  </entry>
  <entry>
    <title>本地开发使用 https</title>
    <url>/posts/32953/</url>
    <content><![CDATA[<p>这阵子本地开发测试，需要本地可以使用 HTTPS 证书，找到了 <code>mkcert</code> 这个傻瓜式的工具（<a href="https://github.com/FiloSottile/mkcert">https://github.com/FiloSottile/mkcert</a>),</p>
<p>mkcert 设计很简单，优雅，隐藏了几乎所有生成 TLS 证书所必须的知识，它适用于任何域名，主机名，IP，包括 localhost，但是切记，只能在本地使用。<span id="more"></span></p>
<p>证书是由你自己的私有 CA 签发，当你运行 <code>mkcert-install</code> 会自动配置这些信任，因此，当浏览器访问时，就会显示安全标识。</p>
<p>与 OpenSSL 不同的是，不需要为每个证书配置很多选项。mkcert 最主要的功能是作为开发者工具，聚焦于让本地环境配置 TLS 证书变得简单高效。</p>
<h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install mkcert</span><br><span class="line">brew install nss # if you use Firefox</span><br></pre></td></tr></table></figure>

<h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2 使用"></a>2 使用</h3><p>您需要首先在系统信任库中安装本地 CA.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mkcert -install</span></span><br><span class="line"></span><br><span class="line">Using the local CA at &quot;/Users/kycool/Library/Application Support/mkcert&quot; ✨</span><br><span class="line">The local CA is already installed in the system trust store! 👍</span><br></pre></td></tr></table></figure>

<p>完成后，可以给自己的本地域名生成证书了，生成证书很简单</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> mkcert kycooltest.cn <span class="string">&#x27;*.kycooltest.cn&#x27;</span> localhost 127.0.0.1 ::1</span></span><br><span class="line">Using the local CA at &quot;/Users/kycool/Library/Application Support/mkcert&quot; ✨</span><br><span class="line"></span><br><span class="line">Created a new certificate valid for the following names 📜</span><br><span class="line"> - &quot;kycooltest.cn&quot;</span><br><span class="line"> - &quot;*.kycooltest.cn&quot;</span><br><span class="line"> - &quot;localhost&quot;</span><br><span class="line"> - &quot;127.0.0.1&quot;</span><br><span class="line"> - &quot;::1&quot;</span><br><span class="line"></span><br><span class="line">Reminder: X.509 wildcards only go one level deep, so this won&#x27;t match a.b.kycooltest.cn ℹ️</span><br><span class="line"></span><br><span class="line">The certificate is at &quot;./kycooltest.cn+4.pem&quot; and the key at &quot;./kycooltest.cn+4-key.pem&quot; ✅</span><br></pre></td></tr></table></figure>

<h3 id="3-验证"><a href="#3-验证" class="headerlink" title="3 验证"></a>3 验证</h3><p>添加本地 <code>hosts</code> 记录</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> kycooltest.cn</span><br></pre></td></tr></table></figure>

<p>添加 nginx 配置文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen *:<span class="number">443</span> ssl;</span><br><span class="line">    server_name  kycooltest.cn;</span><br><span class="line"></span><br><span class="line">    root /var/www;</span><br><span class="line"></span><br><span class="line">    ssl_certificate /Users/kycool/Documents/caddy/kycooltest.cn+<span class="number">4.</span>pem;</span><br><span class="line">    ssl_certificate_key /Users/kycool/Documents/caddy/kycooltest.cn+<span class="number">4</span>-key.pem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着在 浏览器中打开 <code>https://kycooltest.cn</code></p>
<p><img src="/posts/32953/mkcert.png" alt="mkcert.png"></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>https</tag>
      </tags>
  </entry>
  <entry>
    <title>Antd：Form 的 InitialValues 重置</title>
    <url>/posts/59046/</url>
    <content><![CDATA[<p>描述：编辑页面中 <code>Form</code> 的 <code>InitialValues</code> 的重置</p>
<span id="more"></span>

<h3 id="1-场景描述"><a href="#1-场景描述" class="headerlink" title="1 场景描述"></a>1 场景描述</h3><p>管理后台的通用场景，列表页面，然后点击新建或者更新，这里说的是更新的场景，异步请求，重新渲染表单。</p>
<p>管理后台使用 <code>antd-pro</code> 搭建，<code>antd</code> 使用了 <code>4.x</code> 版本，注意这个版本对 <code>Form</code> 做了些调整。</p>
<p>点击更新进入表单页面，我设置了 <code>state</code> 的初始值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">state = &#123;</span><br><span class="line">  <span class="attr">initialValues</span>: &#123;&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>然后异步请求，请求到结果后，需要重置 <code>initialValues</code>，但是根据 <code>antd</code> 的文档</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">initialValue 表单默认值，只有初始化以及重置时生效</span><br></pre></td></tr></table></figure>

<p>所以异步请求后如果重新 <code>setState(&#123; initialValues &#125;)</code>，这样是无效的，你会看到对应的表单中没有数据，都是空的。只能重置，这种问题怎么解决掉</p>
<h3 id="2-重置-initialValues"><a href="#2-重置-initialValues" class="headerlink" title="2 重置 initialValues"></a>2 重置 initialValues</h3><p><strong>2.1 如果是函数式组件，官方推荐使用 <code>Form.useForm</code> 创建表单数据域进行控制</strong></p>
<p>使用用法如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [form] = <span class="title class_">Form</span>.<span class="title function_">useForm</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在异步请求中重置表单初始值</span></span><br><span class="line"><span class="title function_">asyncRequest</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">initialValues</span>) =&gt;</span> form.<span class="title function_">setFieldsValue</span>(&#123; initialValues &#125;));</span><br></pre></td></tr></table></figure>

<p><strong>2.2 如果是在 class component 下，你也可以通过 ref 获取数据域</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  formRef = <span class="title class_">React</span>.<span class="title function_">createRef</span>();</span><br><span class="line"></span><br><span class="line">  UNSAFE_componentWillMount = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 在异步请求中重置表单初始值</span></span><br><span class="line">    <span class="title function_">asyncRequest</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">initialValues</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">formRef</span>.<span class="property">current</span>.<span class="title function_">setFieldsValue</span>(&#123; initialValues &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于 <code>UNSAFE_componentWillMount</code> 声明周期函数，有些声明周期函数在未来版本中会被移除或者重命名，这个可以浏览 <a href="https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html">https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html</a></p>
<h3 id="3-完整的参考示例"><a href="#3-完整的参考示例" class="headerlink" title="3 完整的参考示例"></a>3 完整的参考示例</h3><p>这里我使用了类组件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Form</span>, <span class="title class_">Input</span>, <span class="title class_">Button</span> &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">FairyUploader</span> <span class="keyword">from</span> <span class="string">&quot;@/fairy/components/Uploader&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">FairyRichTextEditor</span> <span class="keyword">from</span> <span class="string">&quot;@/fairy/components/RichTextEditor&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;@/utils/store&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">CreateUpdateForm</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">create</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">initialValues</span>: &#123;&#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  formRef = <span class="title class_">React</span>.<span class="title function_">createRef</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">UNSAFE_componentWillMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; id &#125; = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">match</span>.<span class="property">params</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数据详情</span></span><br><span class="line">    <span class="keyword">if</span> (id) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">create</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">      store</span><br><span class="line">        .<span class="title function_">dispatch</span>(&#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;product/retrieve&quot;</span>,</span><br><span class="line">          <span class="attr">payload</span>: &#123; id &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">initialValues</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">formRef</span>.<span class="property">current</span>.<span class="title function_">setFieldsValue</span>(initialValues);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onFinish = <span class="function">(<span class="params">values</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Success:&quot;</span>, values);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  onFinishFailed = <span class="function">(<span class="params">errorInfo</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Failed:&quot;</span>, errorInfo);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; initialValues, create &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">    <span class="keyword">const</span> formProps = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;basic&quot;</span>,</span><br><span class="line">      <span class="attr">onFinish</span>: <span class="variable language_">this</span>.<span class="property">onFinish</span>,</span><br><span class="line">      <span class="attr">onFinishFailed</span>: <span class="variable language_">this</span>.<span class="property">onFinishFailed</span>,</span><br><span class="line">      initialValues,</span><br><span class="line">      <span class="attr">ref</span>: <span class="variable language_">this</span>.<span class="property">formRef</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Form</span> &#123;<span class="attr">...formProps</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Form.Item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">name</span>=<span class="string">&quot;name&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">rules</span>=<span class="string">&#123;[&#123;</span> <span class="attr">required:</span> <span class="attr">true</span>, <span class="attr">message:</span> &quot;<span class="attr">请填写姓名</span>&quot; &#125;]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Input</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Form.Item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">label</span>=<span class="string">&quot;职业&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">name</span>=<span class="string">&quot;position&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">rules</span>=<span class="string">&#123;[&#123;</span> <span class="attr">required:</span> <span class="attr">true</span>, <span class="attr">message:</span> &quot;<span class="attr">请输入职业</span>&quot; &#125;]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Input</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Form.Item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">label</span>=<span class="string">&quot;头像&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">name</span>=<span class="string">&quot;avatar&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">rules</span>=<span class="string">&#123;[&#123;</span> <span class="attr">required:</span> <span class="attr">true</span>, <span class="attr">message:</span> &quot;<span class="attr">请上传头像</span>&quot; &#125;]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">FairyUploader</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Form.Item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">label</span>=<span class="string">&quot;描述&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">name</span>=<span class="string">&quot;description&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">rules</span>=<span class="string">&#123;[&#123;</span> <span class="attr">required:</span> <span class="attr">true</span>, <span class="attr">message:</span> &quot;<span class="attr">请输入描述</span>&quot; &#125;]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">FairyRichTextEditor</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">htmlType</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;create ? &quot;保存&quot; : &quot;更新&quot;&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Form</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-小结"><a href="#4-小结" class="headerlink" title="4 小结"></a>4 小结</h3><ul>
<li><code>antd</code> 对于各种使用场景还是给出了详细的说明和例子参考的，这个很赞。</li>
<li>使用 <code>React</code> 的各种警告，这个需要认真根据官方的引导进行调整。</li>
<li>根据上面的参考示例可以想到对于这种通用的更新创建表单，完全可以使用通用的 <code>HOC</code>，根据不同的配置渲染出不同的页面，这样一个高阶组件可以解决掉通用的创建更新表单。同样，对于列表页面也是如此，其实说白了，管理后台可以根据配置生成出来。对于一些需要自定义的业务，可以让高阶组件支持继承和钩子的重置来解决，如果实在解决不了的业务，可以单独写页面也是可以的。对于这个，我会专门写一篇文章来陈述下。</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>redux</tag>
        <tag>Antd</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 | 重构 gulpfile.js</title>
    <url>/posts/18305/</url>
    <content><![CDATA[<p>迭代持续重构 gulpfile.js<span id="more"></span></p>
<h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1 背景"></a>1 背景</h3><p>前端任务打包工具选用的是 <code>gulp</code>, 当时选用 <code>gulp</code> 也是偶然，在使用 <code>grunt</code> 初期，翻阅 <code>dailyjs.com</code> 时发现一片文章着重介绍了 <code>gulp</code>, 甚至还预言是 <code>grunt</code> 的劲敌，好奇心驱使，确实发现，<code>gulp</code> 的流的概念更人性化，看着当时写的 <code>grunt</code> 配置文件，不忍直视 <!--more--></p>
<p>由于项目的不断迭代，前端的任务也在不断的迭代，任务越来越多，没有优化前，全部的任务都在一个单独的 <code>gulpfile.js</code> 中，后来随着时间的推移，发现修改一个任务时，查询好麻烦，五百行左右的代码让人烦躁，代码结构和 <a href="https://github.com/gulpjs/gulp/blob/master/docs/recipes/using-multiple-sources-in-one-task.md">https://github.com/gulpjs/gulp/blob/master/docs/recipes/using-multiple-sources-in-one-task.md</a> 如出一辙</p>
<p>重构 <code>gulpfile.js</code> 必须要进行</p>
<h3 id="2-重构迭代-1-拆分任务"><a href="#2-重构迭代-1-拆分任务" class="headerlink" title="2 重构迭代 1: 拆分任务"></a>2 重构迭代 1: 拆分任务</h3><p>最先是按照 <a href="https://github.com/gulpjs/gulp/blob/master/docs/recipes/split-tasks-across-multiple-files.md">https://github.com/gulpjs/gulp/blob/master/docs/recipes/split-tasks-across-multiple-files.md</a> 此文档中的架构进行迭代的</p>
<h4 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">gulpfile.<span class="property">js</span></span><br><span class="line">tasks/</span><br><span class="line">├── xxxx.<span class="property">js</span></span><br><span class="line">├── xxxx.<span class="property">js</span></span><br><span class="line">└── image.<span class="property">js</span></span><br></pre></td></tr></table></figure>

<h4 id="image-js"><a href="#image-js" class="headerlink" title="image.js"></a>image.js</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">&quot;gulp-imagemin&quot;</span>);</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;img&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .<span class="title function_">src</span>(<span class="string">&quot;./images/**/*.*&quot;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(</span><br><span class="line">      <span class="title function_">imagemin</span>(&#123;</span><br><span class="line">        <span class="attr">optimizationLevel</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">progressive</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;./imagemini&quot;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="gulpfile-js"><a href="#gulpfile-js" class="headerlink" title="gulpfile.js"></a>gulpfile.js</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> requireDir = <span class="built_in">require</span>(<span class="string">&quot;require-dir&quot;</span>),</span><br><span class="line">  tasks = <span class="title function_">requireDir</span>(<span class="string">&quot;./tasks&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>这种文件架构让任务按照类型分成子任务放在单独的文件中，顿时感觉干净了很多，这时可以自由的添加子任务，而不用管 <code>gulpfile.js</code>, 此时子任务好比插件，需要就添加，没用就删除，相当方便</p>
<h3 id="3-重构迭代-2-避免模块和插件重复依赖"><a href="#3-重构迭代-2-避免模块和插件重复依赖" class="headerlink" title="3 重构迭代 2: 避免模块和插件重复依赖"></a>3 重构迭代 2: 避免模块和插件重复依赖</h3><p>随着时间的推移，发现这种组织架构还是有些不方便，不方便在哪里呢，每一个任务文件中，我都要写 <code>var xxx = require(&#39;xxx&#39;)</code>, 如果你是用上面的架构，任务多的时候，估计也会抓狂，因为你会发现 <code>插件和模块依赖被重复的引入进来</code>，这样就提高了成本</p>
<p>我不想在子任务文件中重复的引入 <code>插件或模块依赖</code>，有没有上面好方法，<code>stackoverflow</code> 是个好老师，老师告知：</p>
<ul>
<li>使用 <code>gulp-load-plugins</code> 插件<br>地址：<a href="https://www.npmjs.com/package/gulp-load-plugins">https://www.npmjs.com/package/gulp-load-plugins</a></li>
<li>把子任务封装成模块</li>
</ul>
<h4 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">gulpfile.<span class="property">js</span></span><br><span class="line">tasks/</span><br><span class="line">├── xxxx.<span class="property">js</span></span><br><span class="line">├── xxxx.<span class="property">js</span></span><br><span class="line">└── image.<span class="property">js</span></span><br></pre></td></tr></table></figure>

<h4 id="gulpfile-js-1"><a href="#gulpfile-js-1" class="headerlink" title="gulpfile.js"></a>gulpfile.js</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>),</span><br><span class="line">  gulpLoadPlugins = <span class="built_in">require</span>(<span class="string">&quot;gulp-load-plugins&quot;</span>);</span><br><span class="line"><span class="comment">// 这里请查看文档</span></span><br><span class="line">gulpLoadPlugins.<span class="property">imagemin</span> = <span class="built_in">require</span>(<span class="string">&quot;gulp-imagemin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;./tasks/image&quot;</span>)(gulp, gulpLoadPlugins);</span><br></pre></td></tr></table></figure>

<h4 id="image-js-1"><a href="#image-js-1" class="headerlink" title="image.js"></a>image.js</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params">gulp, Plugin</span>) &#123;</span><br><span class="line">  gulp.<span class="title function_">task</span>(<span class="string">&quot;img&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">      .<span class="title function_">src</span>(<span class="string">&quot;./images/**/*.*&quot;</span>)</span><br><span class="line">      .<span class="title function_">pipe</span>(</span><br><span class="line">        <span class="title class_">Plugin</span>.<span class="title function_">imagemin</span>(&#123;</span><br><span class="line">          <span class="attr">optimizationLevel</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">progressive</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">      )</span><br><span class="line">      .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;./imagemini&quot;</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>运行任务 一切正常，此时一个文件测试已经 ok</p>
<p>但是 <code>./tasks</code> 下面是有很多的子任务，所以需要一个迭代加载，修改 <code>gulpfile.js</code> 如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>),</span><br><span class="line">  gulpLoadPlugins = <span class="built_in">require</span>(<span class="string">&quot;gulp-load-plugins&quot;</span>),</span><br><span class="line">  <span class="comment">// 这里获取子任务文件列表 使用了 fs 模块</span></span><br><span class="line">  gulpTaskList = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>).<span class="title function_">readdirSync</span>(<span class="string">&quot;./tasks/&quot;</span>);</span><br><span class="line"><span class="comment">// 这里请查看文档</span></span><br><span class="line">gulpLoadPlugins.<span class="property">imagemin</span> = <span class="built_in">require</span>(<span class="string">&quot;gulp-imagemin&quot;</span>);</span><br><span class="line"></span><br><span class="line">gulpTaskList.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">taskfile</span>) &#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&quot;./tasks/&quot;</span> + taskfile)(gulp, gulpLoadPlugins);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这一次迭代避免了<code>重复依赖</code>的问题，但是你会发现，所有的依赖都声明在 <code>gulpTaskList</code> 命名空间下，如果你依赖很多插件或模块，<code>gulpfile.js</code> 也是相当长，鱼和熊掌不可兼得，在现在情况下，只能寻找最佳的解决方案</p>
<h3 id="4-重构迭代-3-参数配置全局化"><a href="#4-重构迭代-3-参数配置全局化" class="headerlink" title="4 重构迭代 3: 参数配置全局化"></a>4 重构迭代 3: 参数配置全局化</h3><p>其实第二部迭代之后，就可以满足大部分需求，但还是有小伙伴抱怨，有些子任务有相同的参数，能不能抽取出来，放到一个单独的文件中，so 继续翻阅文档</p>
<p>参考文档<a href="https://github.com/gulpjs/gulp/blob/master/docs/recipes/using-external-config-file.md">https://github.com/gulpjs/gulp/blob/master/docs/recipes/using-external-config-file.md</a></p>
<h4 id="代码结构-1"><a href="#代码结构-1" class="headerlink" title="代码结构"></a>代码结构</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">gulpfile.<span class="property">js</span></span><br><span class="line">gulp</span><br><span class="line">├── config.<span class="property">json</span></span><br><span class="line">├── tasks/</span><br><span class="line">    ├── xxxx.<span class="property">js</span></span><br><span class="line">    ├── xxxx.<span class="property">js</span></span><br><span class="line">    └── image.<span class="property">js</span></span><br></pre></td></tr></table></figure>

<p><code>注意：文件夹层次变了</code></p>
<h4 id="config-json"><a href="#config-json" class="headerlink" title="config.json"></a>config.json</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;pnglevel&quot;</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="gulpfile-js-2"><a href="#gulpfile-js-2" class="headerlink" title="gulpfile.js"></a>gulpfile.js</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>)</span><br><span class="line">  , config = <span class="built_in">require</span>(<span class="string">&#x27;./gulp/config.json&#x27;</span>);</span><br><span class="line">  , gulpLoadPlugins = <span class="built_in">require</span>(<span class="string">&#x27;gulp-load-plugins&#x27;</span>)</span><br><span class="line">  , gulpTaskList = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="title function_">readdirSync</span>(<span class="string">&#x27;./gulp/tasks/&#x27;</span>)</span><br><span class="line">  ;</span><br><span class="line"></span><br><span class="line">gulpLoadPlugins.<span class="property">imagemin</span> = <span class="built_in">require</span>(<span class="string">&#x27;gulp-imagemin&#x27;</span>);</span><br><span class="line"></span><br><span class="line">gulpTaskList.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">taskfile</span>) &#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;./gulp/tasks/&#x27;</span> + taskfile)(gulp, gulpLoadPlugins, config);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="image-js-2"><a href="#image-js-2" class="headerlink" title="image.js"></a>image.js</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params">gulp, Plugin, config</span>) &#123;</span><br><span class="line">  gulp.<span class="title function_">task</span>(<span class="string">&quot;img&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">      .<span class="title function_">src</span>(<span class="string">&quot;./images/**/*.*&quot;</span>)</span><br><span class="line">      .<span class="title function_">pipe</span>(</span><br><span class="line">        <span class="title class_">Plugin</span>.<span class="title function_">imagemin</span>(&#123;</span><br><span class="line">          <span class="attr">optimizationLevel</span>: config.<span class="property">pnglevel</span>,</span><br><span class="line">          <span class="attr">progressive</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">      )</span><br><span class="line">      .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&quot;./imagemini&quot;</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>此次迭代结束后，我把子任务中通用的配置都写到 <code>./gulp/config.json</code> 中，全局配置</p>
<h3 id="5-重构迭代-4-参数配置模块化"><a href="#5-重构迭代-4-参数配置模块化" class="headerlink" title="5 重构迭代 4: 参数配置模块化"></a>5 重构迭代 4: 参数配置模块化</h3><p>此次迭代紧跟迭代 3，<code>json</code> 不够完美，不想每次去写 <code>&quot;&quot;</code>, 这里我把配置文件封装成一个模块</p>
<p>即迭代 3 中的 <code>config.json</code> 变成了 <code>config.js</code></p>
<h4 id="config-js"><a href="#config-js" class="headerlink" title="config.js"></a>config.js</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> config = &#123;</span><br><span class="line">    <span class="attr">pnglevel</span>: <span class="number">2</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="gulpfile-js-加载"><a href="#gulpfile-js-加载" class="headerlink" title="gulpfile.js 加载"></a>gulpfile.js 加载</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">&quot;./gulp/gulp.config&quot;</span>)();</span><br></pre></td></tr></table></figure>

<p>其他不变，当封装成一个模块的时候，你就发现好处多多了，可以在模块中添加函数，你也可以把配置拆分，根据你的业务需要，自由调整</p>
<h3 id="6-后记"><a href="#6-后记" class="headerlink" title="6 后记"></a>6 后记</h3><p>通过 4 步的迭代，整个代码组织架构就清晰多了，很感谢这么多热爱开源，乐于助人的朋友，谢谢</p>
<p>注意：子任务中注意文件夹的层次，子任务中的文件夹是以 <code>gulpfile.js</code> 为基准，因为 <code>gulpfile.js</code> 把子任务都包含进来了</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian | Media change please insert the disc labeled</title>
    <url>/posts/20380/</url>
    <content><![CDATA[<p>使用 <code>apt install xxx</code> 时，出现下面的报错 <span id="more"></span></p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p><code>apt update</code> 执行时，报以下错误</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Media change: please insert the disc labeled</span><br><span class="line"></span><br><span class="line">media change: please insert the disc labeled</span><br><span class="line">Debian 10.9.3 - Release amd64 (20210327.10) in the drive /media/cdrom/ and press enter</span><br></pre></td></tr></table></figure>

<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>错误信息通常出现在使用基于 <code>Debian</code> 或 <code>Ubuntu</code> 的 Linux 发行版时，出现这个错误的原因是 <code>/etc/apt/sources.list</code> 文件中仍然保留有光盘 <code>（CD/DVD）</code> 源，导致系统在尝试安装软件包或更新时试图从光盘源读取数据。</p>
<p>为了解决这个问题，需要编辑 <code>/etc/apt/sources.list</code> 文件，注释掉或删除与光盘源相关的行。</p>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>查看下 <code>/etc/apt/sources.list</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># deb cdrom:[Debian GNU/Linux 10.9.0 _Buster_ - Official amd64 DVD Binary-1 20210327-10:39]/ buster contrib main</span></span><br><span class="line"></span><br><span class="line">deb cdrom:[Debian GNU/Linux <span class="number">10.9</span><span class="number">.0</span> _Buster_ - Official amd64 DVD Binary-<span class="number">1</span> <span class="number">20210327</span>-<span class="number">10</span>:<span class="number">39</span>]/ buster contrib main</span><br><span class="line"></span><br><span class="line">deb http://security.debian.org/debian-security buster/updates main contrib</span><br><span class="line">deb-src http://security.debian.org/debian-security buster/updates main contrib</span><br><span class="line"></span><br><span class="line"><span class="comment"># buster-updates, previously known as &#x27;volatile&#x27;</span></span><br><span class="line"><span class="comment"># A network mirror was not selected during install.  The following entries</span></span><br><span class="line"><span class="comment"># are provided as examples, but you should amend them as appropriate</span></span><br><span class="line"><span class="comment"># for your mirror of choice.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># deb http://deb.debian.org/debian/ buster-updates main contrib</span></span><br><span class="line"><span class="comment"># deb-src http://deb.debian.org/debian/ buster-updates main contrib</span></span><br></pre></td></tr></table></figure>

<p>注释掉与光盘源相关的行，通常以 <code>deb cdrom:</code> 开头。<br>这里即把包含 <code>deb cdrom:</code> 这行给注释掉，为了加快更新速度，把 <code>apt</code> 源设置成清华源，修改后的文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># deb cdrom:[Debian GNU/Linux 10.9.0 _Buster_ - Official amd64 DVD Binary-1 20210327-10:39]/ buster contrib main</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># deb cdrom:[Debian GNU/Linux 10.9.0 _Buster_ - Official amd64 DVD Binary-1 20210327-10:39]/ buster contrib main</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># deb https://security.debian.org/debian-security buster/updates main contrib</span></span><br><span class="line"><span class="comment"># deb-src http://security.debian.org/debian-security buster/updates main contrib</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># buster-updates, previously known as &#x27;volatile&#x27;</span></span><br><span class="line"><span class="comment"># A network mirror was not selected during install.  The following entries</span></span><br><span class="line"><span class="comment"># are provided as examples, but you should amend them as appropriate</span></span><br><span class="line"><span class="comment"># for your mirror of choice.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># deb http://deb.debian.org/debian/ buster-updates main contrib</span></span><br><span class="line"><span class="comment"># deb-src http://deb.debian.org/debian/ buster-updates main contrib</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free</span><br></pre></td></tr></table></figure>

<p>然后执行 <code>apt update</code>，最后重新安装软件成功。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Debian</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序未找到入口 sitemap.json</title>
    <url>/posts/6541/</url>
    <content><![CDATA[<p><code>Error</code>: 未找到入口 <code>sitemap.json</code> 文件，或者文件读取失败，请检查后重新编译</p>
<span id="more"></span>

<h3 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1 问题描述"></a>1 问题描述</h3><p>今天在微信开发者工具中发现了一个错误，这个错误一直没有注意到。</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">`Error`: 未找到入口 `sitemap.json` 文件，或者文件读取失败，请检查后重新编译</span><br></pre></td></tr></table></figure>

<p>这个错误不会影响小程序的正常使用，查阅了文档（<a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/sitemap.html%60">微信小程序 sitemap.json</a>），才知道这个文件是用来给微信小程序搜索建立索引用的，下面再仔细分析下这个功能。</p>
<h3 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2 解决方法"></a>2 解决方法</h3><p>第一步：我根据错误描述，在 app.jsx(我使用了 Taro) 同级目录下新建了一个 <code>sitemap.json</code> 文件，内容如下:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;action&quot;</span><span class="punctuation">:</span> <span class="string">&quot;allow&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;page&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>第二步：接着在 <code>app.jsx</code> 中的 <code>config</code> 中添加</p>
<figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">sitemapLocation: <span class="symbol">&#x27;sitemap</span>.json&#x27;,</span><br></pre></td></tr></table></figure>

<p>然后编译测试，发现还是出现同样的错误，然后发现 <code>dist</code> 文件夹下面没有 <code>sitemap.json</code> 文件，这个可能是 <code>Taro</code> 不支持的原因，但是 <code>Taro</code> 还是提供了一个 <code>copy</code> 的编译功能（<a href="https://nervjs.github.io/taro/docs/config-detail.html#copy">Taro 编译配置 copy</a>)，摘出来如下：</p>
<blockquote>
<p>copy</p>
</blockquote>
<p>文件 <code>copy</code> 配置，包含两个配置项 <code>patterns</code> 和 <code>options</code>。</p>
<p><strong>copy.patterns</strong></p>
<p>用来指定需要拷贝的文件或者目录，数组类型，每一项都必须包含 <code>from</code> 、<code>to</code> 的配置，分别代表来源和需要拷贝到的目录，同时可以设置 <code>ignore</code> 配置来指定需要忽略的文件， <code>ignore</code> 是指定的 <code>glob</code> 类型字符串，或者 glob 字符串数组。</p>
<p>值得注意的是，目前 <code>from</code> 必须指定存在的文件或者目录，暂不支持 <code>glob</code> 格式， <code>from</code> 和 <code>to</code> 直接置顶项目根目录下的文件目录，建议 <code>from</code> 以 <code>src</code> 目录开头，<code>to</code> 以 <code>dist</code> 目录开头。</p>
<p>一般有如下的使用形式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">copy: &#123;</span><br><span class="line">    patterns: [</span><br><span class="line">        &#123; <span class="selector-tag">from</span>: <span class="string">&#x27;src/asset/tt/&#x27;</span>, to: <span class="string">&#x27;dist/asset/tt/&#x27;</span>, ignore: <span class="string">&#x27;*.js&#x27;</span> &#125;, // 指定需要 copy 的目录</span><br><span class="line">        &#123; <span class="selector-tag">from</span>: <span class="string">&#x27;src/asset/tt/sd.jpg&#x27;</span>, to: <span class="string">&#x27;dist/asset/tt/sd.jpg&#x27;</span> &#125; // 指定需要 copy 的文件</span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p><strong>copy.options</strong></p>
<p>拷贝配置，目前可以指定全局的 <code>ignore</code>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">copy: &#123;</span><br><span class="line">    options: &#123;</span><br><span class="line">        ignore: [<span class="string">&#x27;*.js&#x27;</span>, <span class="string">&#x27;*.css&#x27;</span>] // 全局的 ignore</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第三步：好了，看完文档后，直接修改 <code>Taro</code> 的配置文件，添加以下内容：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">copy: &#123;</span><br><span class="line">    patterns: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="selector-tag">from</span>: <span class="string">&#x27;src/sitemap.json&#x27;</span>,</span><br><span class="line">            to: <span class="string">&#x27;dist/sitemap.json&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    options: &#123;&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>再次编译测试，正常，查看 <code>dist</code> 文件夹也存在 <code>sitemap.json</code> 文件。</p>
<h3 id="3-聊下-sitemap"><a href="#3-聊下-sitemap" class="headerlink" title="3 聊下 sitemap"></a>3 聊下 sitemap</h3><p>这个功能不错，增加小程序的曝光度，而且开发者还可以根据业务需要自定义被索引的页面，很实用。如果你不关心这些东西，就参考我的 <code>sitemap.json</code> 配置。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Taro</tag>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux | 查看服务器登录用户的活动情况</title>
    <url>/posts/10000/</url>
    <content><![CDATA[<p>为了安全，会经常性的查看服务器登录的用户的情况，下面列举常用命令的使用<span id="more"></span></p>
<h2 id="1-utmp-wtmp-btmp-文件"><a href="#1-utmp-wtmp-btmp-文件" class="headerlink" title="1 utmp wtmp btmp 文件"></a>1 utmp wtmp btmp 文件</h2><p>这里做个前置说明，因为接下来的很多命令都与这些文件有着千丝万缕的关系。</p>
<h3 id="1-1-文件说明"><a href="#1-1-文件说明" class="headerlink" title="1.1 文件说明"></a>1.1 文件说明</h3><p>Linux 用户登录的信息一般放在了这三个文件中。</p>
<ul>
<li><code>/var/run/utmp</code>：记录当前正在登录系统的用户信息，<code>who</code> 和 <code>w</code>，<code>uptime</code> 命令默认使用此文件。</li>
<li><code>/var/log/wtmp</code>：记录登录过此系统的用户信息，包括现在和过去（其实就是记录 utmp 文件的历史记录），默认由 <code>last</code> 命令查看。</li>
<li><code>/var/log/btmp</code>：记录失败的尝试登录信息（这个也囊括了恶意的尝试暴力登录的尝试)，默认由 <code>lastb</code> 命令查看。</li>
</ul>
<p>这三个文件都是二进制文件，并且这三个文件结构完全相同，结构体的定义在 <code>/usr/include/utmp.h</code> 文件中。</p>
<h3 id="1-2-logrotate"><a href="#1-2-logrotate" class="headerlink" title="1.2 logrotate"></a>1.2 logrotate</h3><p>默认情况下，文件的日志信息会通过 <code>logrotate</code> 日志管理工具定期清理，<code>logrotate</code> 的配置文件（<code>/etc/logrotate.conf</code>)，其是 <code>logrotate</code> 的缺省配置。</p>
<p>通常情况下不需要对它进行修改。日志文件的轮循压缩等配置存放在独立的配置文件中，它们位置是：<code>/etc/logrotate.d/</code> 目录下，他会覆盖缺省配置。</p>
<p>如果不想记录相关信息，则可以直接删除相关的配置文件。如果系统不存在改文件，则新建一个配置文件即可。这里看下默认的系统日志配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@kycool-strict logrotate.d]# cat syslog</span><br><span class="line">/var/log/cron</span><br><span class="line">/var/log/maillog</span><br><span class="line">/var/log/messages</span><br><span class="line">/var/log/secure</span><br><span class="line">/var/log/spooler</span><br><span class="line">&#123;</span><br><span class="line">    missingok</span><br><span class="line">    sharedscripts</span><br><span class="line">    postrotate</span><br><span class="line">	/bin/kill -HUP `cat /var/run/syslogd.pid 2&gt; /dev/null` 2&gt; /dev/null || true</span><br><span class="line">    endscript</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-注意细节"><a href="#1-3-注意细节" class="headerlink" title="1.3 注意细节"></a>1.3 注意细节</h3><p>上面为什么说 <code>/var/log/wtmp</code> 其实是记录 <code>/var/run/utmp</code> 文件的历史记录呢，通过内容对下下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@kycool-strict bits]# utmpdump /var/run/utmp</span><br><span class="line">Utmp dump of /var/run/utmp</span><br><span class="line">[2] [00000] [~~  ] [reboot  ] [~           ] [3.10.0-1160.66.1.el7.x86_64] [0.0.0.0        ] [三 6月 29 23:54:09 2018   ]</span><br><span class="line">[1] [00051] [~~  ] [runlevel] [~           ] [3.10.0-1160.66.1.el7.x86_64] [0.0.0.0        ] [三 6月 29 15:54:19 2018   ]</span><br><span class="line">[6] [01060] [tty1] [LOGIN   ] [tty1        ] [                    ] [0.0.0.0        ] [三 6月 29 15:54:19 2018   ]</span><br><span class="line">[6] [01059] [tyS0] [LOGIN   ] [ttyS0       ] [                    ] [0.0.0.0        ] [三 6月 29 15:54:19 2018   ]</span><br><span class="line">[7] [14985] [ts/0] [root    ] [pts/0       ] [121.32.197.136      ] [121.32.197.136 ] [一 7月 18 10:59:15 2018   ]</span><br><span class="line"></span><br><span class="line">[root@kycool-strict bits]# utmpdump /var/log/wtmp</span><br><span class="line">Utmp dump of /var/log/wtmp</span><br><span class="line">[8] [01088] [tyS0] [        ] [ttyS0       ] [                    ] [0.0.0.0        ] [三 5月 25 10:46:00 2018   ]</span><br><span class="line">[8] [01089] [tty1] [        ] [tty1        ] [                    ] [0.0.0.0        ] [三 5月 25 10:46:00 2018   ]</span><br><span class="line">[2] [00000] [~~  ] [reboot  ] [~           ] [3.10.0-1160.66.1.el7.x86_64] [0.0.0.0        ] [三 6月 29 23:54:09 2018   ]</span><br><span class="line">[1] [00051] [~~  ] [runlevel] [~           ] [3.10.0-1160.66.1.el7.x86_64] [0.0.0.0        ] [三 6月 29 15:54:19 2018   ]</span><br><span class="line">[5] [01060] [tty1] [        ] [tty1        ] [                    ] [0.0.0.0        ] [三 6月 29 15:54:19 2018   ]</span><br><span class="line">[5] [01059] [tyS0] [        ] [ttyS0       ] [                    ] [0.0.0.0        ] [三 6月 29 15:54:19 2018   ]</span><br><span class="line">[6] [01060] [tty1] [LOGIN   ] [tty1        ] [                    ] [0.0.0.0        ] [三 6月 29 15:54:19 2018   ]</span><br><span class="line">[6] [01059] [tyS0] [LOGIN   ] [ttyS0       ] [                    ] [0.0.0.0        ] [三 6月 29 15:54:19 2018   ]</span><br><span class="line">[7] [01379] [ts/0] [root    ] [pts/0       ] [113.65.29.194       ] [113.65.29.194  ] [三 6月 29 15:55:51 2018   ]</span><br><span class="line">[8] [01377] [    ] [        ] [pts/0       ] [                    ] [0.0.0.0        ] [三 6月 29 15:56:27 2018   ]</span><br><span class="line">[7] [01404] [ts/0] [root    ] [pts/0       ] [113.65.29.194       ] [113.65.29.194  ] [三 6月 29 15:56:29 2018   ]</span><br><span class="line">[8] [01402] [    ] [        ] [pts/0       ] [                    ] [0.0.0.0        ] [三 6月 29 16:03:01 2018   ]</span><br><span class="line">[7] [01589] [ts/0] [root    ] [pts/0       ] [113.65.29.194       ] [113.65.29.194  ] [三 6月 29 16:04:39 2018   ]</span><br><span class="line">[8] [01587] [    ] [        ] [pts/0       ] [                    ] [0.0.0.0        ] [三 6月 29 20:12:05 2018   ]</span><br><span class="line">[7] [04064] [ts/0] [root    ] [pts/0       ] [121.32.199.178      ] [121.32.199.178 ] [二 7月 12 15:03:05 2018   ]</span><br><span class="line">[8] [04062] [    ] [        ] [pts/0       ] [                    ] [0.0.0.0        ] [二 7月 12 17:26:21 2018   ]</span><br><span class="line">[7] [14985] [ts/0] [root    ] [pts/0       ] [121.32.197.136      ] [121.32.197.136 ] [一 7月 18 10:59:15 2018   ]</span><br></pre></td></tr></table></figure>

<h2 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2 常用命令"></a>2 常用命令</h2><h3 id="2-1-w"><a href="#2-1-w" class="headerlink" title="2.1 w"></a>2.1 w</h3><p>查看当前登入系统的用户信息及用户当前的线程。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@kycool-strict ~]# w</span><br><span class="line"></span><br><span class="line"> 11:09:28 up 18 days, 19:15,  1 user,  load average: 0.00, 0.01, 0.05</span><br><span class="line">USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</span><br><span class="line">root     pts/0    121.32.197.136   10:59    0.00s  0.00s  0.00s w</span><br></pre></td></tr></table></figure>

<p>输出解释：<br><strong>上半部分</strong><br><code>11:09:28 up 18 days, 19:15, 1 user, load average: 0.00, 0.01, 0.05</code><br>这里其实类似于 <code>top</code> 的第一行，显示了当前的系统时间，开机运行多久（<code>up</code>），有多少用户登录（<code>users</code>），<br>以及 <code>1</code> 分钟，<code>5</code> 分钟，<code>15</code> 分钟前的平均负载（<code>load average</code>）。</p>
<p><strong>下半部分</strong><br>下班部分类似于表格，这就就简述下表头的含义</p>
<ul>
<li><code>USER</code>：登录的用户名</li>
<li><code>TTY</code>：登录的终端</li>
<li><code>FROM</code>：用户从哪个 IP 地址进行登录</li>
<li><code>LOGIN@</code>：登录时间</li>
<li><code>IDLE</code>：用户闲置时间</li>
<li><code>JCPU</code>：处于该终端连接下的所有进程占用的 CPU 运算时间。这个时间不包含过去的后台作业时间，但是<br>包括当前正在运行的后台作业时间</li>
<li><code>PCPU</code>：当前进程所占用的 CPU 运算时间</li>
<li><code>WHAT</code>：当前正在运行的命令</li>
</ul>
<h3 id="2-2-who"><a href="#2-2-who" class="headerlink" title="2.2 who"></a>2.2 who</h3><p>查看当前登录用户的情况</p>
<p>当不指定任何参数时，将按照以下顺序打印信息：<br><strong>登录用户名称，终端信息，登录时间，用户登录 IP 地址</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@kycool-strict ~]# who</span><br><span class="line">root     pts/0        2018-07-18 10:59 (112.22.194.16)</span><br></pre></td></tr></table></figure>

<p>通过 man who 时，发现了一句话：</p>
<p><code>If FILE is not specified, use /var/run/utmp. /var/log/wtmp as FILE is common.</code></p>
<p>即如果不指定文件，默认使用 <code>/var/run/utmp</code> 文件，当前也可以指定文件，进行查看</p>
<p>下面使用 <code>wtmp</code> 文件进行查看</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[root@kycool-strict ~]<span class="comment"># who /var/log/wtmp</span></span><br><span class="line">root pts/<span class="number">0</span> <span class="number">2018</span>-06-<span class="number">29</span> <span class="number">15</span>:<span class="number">55</span> (<span class="number">113.65</span><span class="number">.29</span><span class="number">.194</span>)</span><br><span class="line">root pts/<span class="number">0</span> <span class="number">2018</span>-06-<span class="number">29</span> <span class="number">15</span>:<span class="number">56</span> (<span class="number">113.65</span><span class="number">.29</span><span class="number">.194</span>)</span><br><span class="line">root pts/<span class="number">0</span> <span class="number">2018</span>-06-<span class="number">29</span> <span class="number">16</span>:04 (<span class="number">113.65</span><span class="number">.29</span><span class="number">.194</span>)</span><br><span class="line">root pts/<span class="number">0</span> <span class="number">2018</span>-07-<span class="number">12</span> <span class="number">15</span>:03 (<span class="number">121.32</span><span class="number">.199</span><span class="number">.178</span>)</span><br><span class="line">root pts/<span class="number">0</span> <span class="number">2018</span>-07-<span class="number">18</span> <span class="number">10</span>:<span class="number">59</span> (<span class="number">121.32</span><span class="number">.197</span><span class="number">.136</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里看到了过去，现在登录用户的情况</p>
<h3 id="2-3-users"><a href="#2-3-users" class="headerlink" title="2.3 users"></a>2.3 users</h3><p>查看当前服务器所有登录用户的情况，更详细的可以查看手册。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@kycool-strict ~]# users</span><br><span class="line">root</span><br></pre></td></tr></table></figure>

<h3 id="2-4-lastlog"><a href="#2-4-lastlog" class="headerlink" title="2.4 lastlog"></a>2.4 lastlog</h3><p>列出所有用户最近登录的信息，或者指定用户的最近登录信息。其引用的文件是：<code>/var/log/lastlog</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@kycool-strict log]# lastlog</span><br><span class="line">用户名           端口     来自             最后登陆时间</span><br><span class="line">future          pts/0    121.32.197.136   一 7月 18 10:59:15 +0800 2022</span><br><span class="line">bin                                        **从未登录过**</span><br><span class="line">daemon                                     **从未登录过**</span><br><span class="line">adm                                        **从未登录过**</span><br><span class="line">lp                                         **从未登录过**</span><br><span class="line">sync                                       **从未登录过**</span><br><span class="line">shutdown                                   **从未登录过**</span><br><span class="line">halt                                       **从未登录过**</span><br><span class="line">mail                                       **从未登录过**</span><br><span class="line">operator                                   **从未登录过**</span><br></pre></td></tr></table></figure>

<h3 id="3-5-last"><a href="#3-5-last" class="headerlink" title="3.5 last"></a>3.5 last</h3><p>列出当前和曾经登录系统的用户信息。默认读取 <code>/var/log/wtmp</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@kycool-strict log]# last</span><br><span class="line">root     pts/0        121.32.197.136   Mon Jul 18 10:59   still logged in</span><br><span class="line">root     pts/0        121.32.199.178   Tue Jul 12 15:03 - 17:26  (02:23)</span><br><span class="line">root     pts/0        113.65.29.194    Wed Jun 29 16:04 - 20:12  (04:07)</span><br><span class="line">root     pts/0        113.65.29.194    Wed Jun 29 15:56 - 16:03  (00:06)</span><br><span class="line">root     pts/0        113.65.29.194    Wed Jun 29 15:55 - 15:56  (00:00)</span><br><span class="line">reboot   system boot  3.10.0-1160.66.1 Wed Jun 29 23:54 - 13:54 (18+14:00)</span><br></pre></td></tr></table></figure>

<p>当然，也可以通过 <code>last -f</code> 参数指定读取文件，可以是 <code>/var/log/btmp</code>，<code>/var/run/utmp</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@kycool-strict log]# last -f /var/run/utmp</span><br><span class="line">root     pts/0        121.32.197.136   Mon Jul 18 10:59   still logged in</span><br><span class="line">reboot   system boot  3.10.0-1160.66.1 Wed Jun 29 23:54 - 13:55 (18+14:01)</span><br><span class="line"></span><br><span class="line">utmp begins Wed Jun 29 23:54:09 2022</span><br></pre></td></tr></table></figure>

<h3 id="3-6-lastb"><a href="#3-6-lastb" class="headerlink" title="3.6 lastb"></a>3.6 lastb</h3><p>列出失败的尝试登陆信息，和 last 命令功能相同，不过默认读取的文件是：<code>/var/log/btmp</code>。<br>当然也可以通过 <code>-f</code> 参数指定其他的读取文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@kycool-strict log]# lastb -n 20</span><br><span class="line">avorion  ssh:notty    150.185.5.6      Mon Jul 18 13:25 - 13:25  (00:00)</span><br><span class="line">admin    ssh:notty    109.197.194.157  Mon Jul 18 13:18 - 13:18  (00:00)</span><br><span class="line">admin    ssh:notty    150.185.10.122   Mon Jul 18 13:18 - 13:18  (00:00)</span><br><span class="line">lucas    ssh:notty    103.169.34.130   Mon Jul 18 12:57 - 12:57  (00:00)</span><br><span class="line">abby     ssh:notty    193.122.108.42   Mon Jul 18 12:55 - 12:55  (00:00)</span><br><span class="line">nick     ssh:notty    195.218.137.42   Mon Jul 18 12:53 - 12:53  (00:00)</span><br><span class="line">anurag   ssh:notty    43.128.104.254   Mon Jul 18 12:40 - 12:40  (00:00)</span><br><span class="line">admin    ssh:notty    206.189.87.108   Mon Jul 18 12:32 - 12:32  (00:00)</span><br><span class="line">testuser ssh:notty    192.3.211.39     Mon Jul 18 12:31 - 12:31  (00:00)</span><br><span class="line">quagga   ssh:notty    118.27.36.26     Mon Jul 18 12:30 - 12:30  (00:00)</span><br><span class="line">ismael   ssh:notty    175.47.205.72    Mon Jul 18 12:28 - 12:28  (00:00)</span><br><span class="line">tanya    ssh:notty    62.64.86.44      Mon Jul 18 12:26 - 12:26  (00:00)</span><br><span class="line">weixin   ssh:notty    218.111.88.185   Mon Jul 18 12:25 - 12:25  (00:00)</span><br><span class="line">bob      ssh:notty    121.26.142.238   Mon Jul 18 11:29 - 11:29  (00:00)</span><br><span class="line">test03   ssh:notty    190.147.165.61   Mon Jul 18 11:25 - 11:25  (00:00)</span><br><span class="line">ubuntu   ssh:notty    107.184.205.109  Mon Jul 18 10:33 - 10:33  (00:00)</span><br><span class="line">cafe24   ssh:notty    190.246.155.29   Mon Jul 18 10:11 - 10:11  (00:00)</span><br><span class="line">upload   ssh:notty    196.20.68.81     Mon Jul 18 10:09 - 10:09  (00:00)</span><br><span class="line">postgres ssh:notty    202.29.13.51     Mon Jul 18 10:07 - 10:07  (00:00)</span><br><span class="line">scanner  ssh:notty    111.67.197.134   Mon Jul 18 08:18 - 08:18  (00:00)</span><br></pre></td></tr></table></figure>

<p>通过日志，可以看到存在 <code>ssh</code> 暴力破解的情况。</p>
<h3 id="3-7-utmpdump"><a href="#3-7-utmpdump" class="headerlink" title="3.7 utmpdump"></a>3.7 utmpdump</h3><p>用于转储二进制日志文件到文本格式的的文件以便查看，同时也可以修改二进制文件。包括</p>
<ul>
<li><code>/var/run/utmp</code></li>
<li><code>/var/log/wtmp</code></li>
<li><code>/var/log/btmp</code></li>
</ul>
<p>修改文件可以篡改记录，所以权限一定要严格限定，防止非法操作，例如篡改 <code>wtmp</code> 文件中的登录地址，祸水东引。</p>
<p>查看 <code>wtmp</code> 文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@kycool-strict log]# utmpdump wtmp</span><br><span class="line">Utmp dump of wtmp</span><br><span class="line">[8] [01088] [tyS0] [        ] [ttyS0       ] [                    ] [0.0.0.0        ] [三 5月 25 10:46:00 2022   ]</span><br><span class="line">[8] [01089] [tty1] [        ] [tty1        ] [                    ] [0.0.0.0        ] [三 5月 25 10:46:00 2022   ]</span><br><span class="line">[2] [00000] [~~  ] [reboot  ] [~           ] [3.10.0-1160.66.1.el7.x86_64] [0.0.0.0        ] [三 6月 29 23:54:09 2022   ]</span><br><span class="line">[1] [00051] [~~  ] [runlevel] [~           ] [3.10.0-1160.66.1.el7.x86_64] [0.0.0.0        ] [三 6月 29 15:54:19 2022   ]</span><br><span class="line">[5] [01060] [tty1] [        ] [tty1        ] [                    ] [0.0.0.0        ] [三 6月 29 15:54:19 2022   ]</span><br><span class="line">[5] [01059] [tyS0] [        ] [ttyS0       ] [                    ] [0.0.0.0        ] [三 6月 29 15:54:19 2022   ]</span><br><span class="line">[6] [01060] [tty1] [LOGIN   ] [tty1        ] [                    ] [0.0.0.0        ] [三 6月 29 15:54:19 2022   ]</span><br><span class="line">[6] [01059] [tyS0] [LOGIN   ] [ttyS0       ] [                    ] [0.0.0.0        ] [三 6月 29 15:54:19 2022   ]</span><br><span class="line">[7] [01379] [ts/0] [root    ] [pts/0       ] [113.65.29.194       ] [113.65.29.194  ] [三 6月 29 15:55:51 2022   ]</span><br><span class="line">[8] [01377] [    ] [        ] [pts/0       ] [                    ] [0.0.0.0        ] [三 6月 29 15:56:27 2022   ]</span><br><span class="line">[7] [01404] [ts/0] [root    ] [pts/0       ] [113.65.29.194       ] [113.65.29.194  ] [三 6月 29 15:56:29 2022   ]</span><br><span class="line">[8] [01402] [    ] [        ] [pts/0       ] [                    ] [0.0.0.0        ] [三 6月 29 16:03:01 2022   ]</span><br><span class="line">[7] [01589] [ts/0] [root    ] [pts/0       ] [113.65.29.194       ] [113.65.29.194  ] [三 6月 29 16:04:39 2022   ]</span><br><span class="line">[8] [01587] [    ] [        ] [pts/0       ] [                    ] [0.0.0.0        ] [三 6月 29 20:12:05 2022   ]</span><br><span class="line">[7] [04064] [ts/0] [root    ] [pts/0       ] [121.32.199.178      ] [121.32.199.178 ] [二 7月 12 15:03:05 2022   ]</span><br><span class="line">[8] [04062] [    ] [        ] [pts/0       ] [                    ] [0.0.0.0        ] [二 7月 12 17:26:21 2022   ]</span><br><span class="line">[7] [14985] [ts/0] [root    ] [pts/0       ] [121.32.197.136      ] [121.32.197.136 ] [一 7月 18 10:59:15 2022   ]</span><br></pre></td></tr></table></figure>

<p>模拟修改最后一行的 <code>IP</code> 地址，把 <code>121.32.197.136</code> 修改为 <code>121.32.197.122</code></p>
<p><strong>第一步：导出文本信息</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@kycool-strict log]# utmpdump wtmp &gt; tmp_wtmp</span><br><span class="line">Utmp dump of wtmp</span><br></pre></td></tr></table></figure>

<p><strong>第二步：修改 tmp_wtmp 文件</strong></p>
<p>将 <code>121.32.197.136</code> 修改为 <code>121.32.197.122</code></p>
<p><strong>第三步：覆盖源文件</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@kycool-strict log]# utmpdump -r tmp_wtmp &gt; wtmp</span><br><span class="line">Utmp undump of tmp_wtmp</span><br></pre></td></tr></table></figure>

<p><strong>第四步：再次查看，进行确认</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@kycool-strict log]# utmpdump wtmp</span><br><span class="line">Utmp dump of wtmp</span><br><span class="line">[8] [01088] [tyS0] [        ] [ttyS0       ] [                    ] [0.0.0.0        ] [三 5月 25 10:46:00 2022   ]</span><br><span class="line">[8] [01089] [tty1] [        ] [tty1        ] [                    ] [0.0.0.0        ] [三 5月 25 10:46:00 2022   ]</span><br><span class="line">[2] [00000] [~~  ] [reboot  ] [~           ] [3.10.0-1160.66.1.el7.x86_64] [0.0.0.0        ] [三 6月 29 23:54:09 2022   ]</span><br><span class="line">[1] [00051] [~~  ] [runlevel] [~           ] [3.10.0-1160.66.1.el7.x86_64] [0.0.0.0        ] [三 6月 29 15:54:19 2022   ]</span><br><span class="line">[5] [01060] [tty1] [        ] [tty1        ] [                    ] [0.0.0.0        ] [三 6月 29 15:54:19 2022   ]</span><br><span class="line">[5] [01059] [tyS0] [        ] [ttyS0       ] [                    ] [0.0.0.0        ] [三 6月 29 15:54:19 2022   ]</span><br><span class="line">[6] [01060] [tty1] [LOGIN   ] [tty1        ] [                    ] [0.0.0.0        ] [三 6月 29 15:54:19 2022   ]</span><br><span class="line">[6] [01059] [tyS0] [LOGIN   ] [ttyS0       ] [                    ] [0.0.0.0        ] [三 6月 29 15:54:19 2022   ]</span><br><span class="line">[7] [01379] [ts/0] [root    ] [pts/0       ] [113.65.29.194       ] [113.65.29.194  ] [三 6月 29 15:55:51 2022   ]</span><br><span class="line">[8] [01377] [    ] [        ] [pts/0       ] [                    ] [0.0.0.0        ] [三 6月 29 15:56:27 2022   ]</span><br><span class="line">[7] [01404] [ts/0] [root    ] [pts/0       ] [113.65.29.194       ] [113.65.29.194  ] [三 6月 29 15:56:29 2022   ]</span><br><span class="line">[8] [01402] [    ] [        ] [pts/0       ] [                    ] [0.0.0.0        ] [三 6月 29 16:03:01 2022   ]</span><br><span class="line">[7] [01589] [ts/0] [root    ] [pts/0       ] [113.65.29.194       ] [113.65.29.194  ] [三 6月 29 16:04:39 2022   ]</span><br><span class="line">[8] [01587] [    ] [        ] [pts/0       ] [                    ] [0.0.0.0        ] [三 6月 29 20:12:05 2022   ]</span><br><span class="line">[7] [04064] [ts/0] [root    ] [pts/0       ] [121.32.199.178      ] [121.32.199.178 ] [二 7月 12 15:03:05 2022   ]</span><br><span class="line">[8] [04062] [    ] [        ] [pts/0       ] [                    ] [0.0.0.0        ] [二 7月 12 17:26:21 2022   ]</span><br><span class="line">[7] [14985] [ts/0] [root    ] [pts/0       ] [121.32.197.122      ] [121.32.197.122 ] [一 7月 18 10:59:15 2022   ]</span><br></pre></td></tr></table></figure>

<p>最后一行中的 <code>IP</code> 地址已经变成了 <code>121.32.197.122</code></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 不同的发行版设置静态 IP</title>
    <url>/posts/29624/</url>
    <content><![CDATA[<p>近来在折腾本地服务器，为了方式每次重启 IP 地址的变化，所以要给机器设置静态 IP <span id="more"></span></p>
<h2 id="一-不同发行版静态-IP-设置"><a href="#一-不同发行版静态-IP-设置" class="headerlink" title="一 不同发行版静态 IP 设置"></a>一 不同发行版静态 IP 设置</h2><h3 id="1-Centos-设置静态-IP"><a href="#1-Centos-设置静态-IP" class="headerlink" title="1 Centos 设置静态 IP"></a>1 Centos 设置静态 IP</h3><h4 id="1-1-找出需要设置静态-IP-的网络接口名称"><a href="#1-1-找出需要设置静态-IP-的网络接口名称" class="headerlink" title="1.1 找出需要设置静态 IP 的网络接口名称"></a>1.1 找出需要设置静态 IP 的网络接口名称</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[isproot@192 ~]$ nmcli device status</span><br><span class="line">DEVICE      TYPE      STATE      CONNECTION</span><br><span class="line">eth192        ethernet  connected  System eth192</span><br><span class="line">virbr0      bridge    connected  virbr0</span><br><span class="line">lo          loopback  unmanaged  --</span><br><span class="line">virbr0-nic  tun       unmanaged  --</span><br></pre></td></tr></table></figure>

<p>可以看到需要设置的接口对应的名称是 <code>eth192</code></p>
<h4 id="1-2-修改网络接口相关的配置文件"><a href="#1-2-修改网络接口相关的配置文件" class="headerlink" title="1.2 修改网络接口相关的配置文件"></a>1.2 修改网络接口相关的配置文件</h4><p>该文件通常位于 <code>/etc/sysconfig/network-scripts/</code> 目录下，文件名格式为 <code>ifcfg-&lt;接口名称&gt;</code>。例如，如果接口名称为 ens33，需要编辑 &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33 文件。使用以下命令打开文件：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vi <span class="regexp">/etc/</span>sysconfig<span class="regexp">/network-scripts/i</span>fcfg-eth192</span><br></pre></td></tr></table></figure>

<p>然后做以下改动</p>
<ol>
<li>找到 <code>BOOTPROTO=dhcp</code> 行，将 <code>dhcp</code> 更改为 <code>static</code> 或 <code>none</code></li>
<li>在文件末尾添加以下行</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 静态 IP</span></span><br><span class="line">IPADDR=<span class="number">192.168</span><span class="number">.1</span><span class="number">.12</span></span><br><span class="line"><span class="comment"># 默认网关</span></span><br><span class="line">GATEWAY=<span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span></span><br></pre></td></tr></table></figure>

<p>修改后文件如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line"><span class="comment"># 这里可以使用 static 或者 no</span></span><br><span class="line">BOOTPROTO=none</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class="line">NAME=ens192</span><br><span class="line">UUID=cd93f1df-d2d5-4c63-a64c-761e9ee23aae</span><br><span class="line">DEVICE=ens192</span><br><span class="line"><span class="comment"># 开机启用此配置</span></span><br><span class="line">ONBOOT=yes</span><br><span class="line"><span class="comment"># 静态 IP</span></span><br><span class="line">IPADDR=<span class="number">192.168</span><span class="number">.1</span><span class="number">.12</span></span><br><span class="line"><span class="comment"># 默认网关</span></span><br><span class="line">GATEWAY=<span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span></span><br></pre></td></tr></table></figure>

<h4 id="1-3-重启网络服务"><a href="#1-3-重启网络服务" class="headerlink" title="1.3 重启网络服务"></a>1.3 重启网络服务</h4><p>对于 <code>Centos7</code>:</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">systemctl restart network</span></span><br></pre></td></tr></table></figure>

<p>对于 <code>Centos8</code>:</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">systemctl restart NetworkManager</span></span><br></pre></td></tr></table></figure>

<h4 id="1-4-查看地址"><a href="#1-4-查看地址" class="headerlink" title="1.4 查看地址"></a>1.4 查看地址</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[isproot@192 ~]$ ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens192: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:51:63:21 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.1.12/24 brd 192.168.1.255 scope global noprefixroute ens192</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 2408:8256:a80:313:6ba6:7ad0:edd0:defe/64 scope global noprefixroute dynamic</span><br><span class="line">       valid_lft 183241sec preferred_lft 96841sec</span><br><span class="line">    inet6 fe80::b6f3:1daa:4b7b:6994/64 scope link noprefixroute</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>

<p>现在，CentOS 系统应该使用指定的静态 IP 地址进行网络通信。请注意，为了避免 IP 地址冲突，您需要确保分配给 CentOS 系统的静态 IP 地址在本地网络中是唯一的，并且不在 DHCP 服务器的分配范围内</p>
<h3 id="2-Debian-设置静态-IP"><a href="#2-Debian-设置静态-IP" class="headerlink" title="2 Debian 设置静态 IP"></a>2 Debian 设置静态 IP</h3><h4 id="2-1-找出需要设置静态-IP-的网络接口名称"><a href="#2-1-找出需要设置静态-IP-的网络接口名称" class="headerlink" title="2.1 找出需要设置静态 IP 的网络接口名称"></a>2.1 找出需要设置静态 IP 的网络接口名称</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@debian:~# ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens192: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:92:2d:16 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.1.103/24 brd 192.168.1.255 scope global noprefixroute ens192</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::6c5d:abfc:8b6:bd5c/64 scope link noprefixroute</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>

<p>将看到类似于 eth0、enp0s3 或 enp192 等的接口名称。请记下要设置静态 IP 的接口名称，这里需要调整的接口即为 <code>eth192</code></p>
<h4 id="2-2-修改网络配置"><a href="#2-2-修改网络配置" class="headerlink" title="2.2 修改网络配置"></a>2.2 修改网络配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/network/interfaces</span><br></pre></td></tr></table></figure>

<p>在文件中找到您要设置静态 IP 的接口。它应该类似于以下内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">iface eth192 inet dhcp</span><br></pre></td></tr></table></figure>

<p>其中 <code>eth192</code> 是网络接口的名称，<code>dhcp</code> 表示该接口使用 <code>DHCP</code> 获取 IP 地址。</p>
<p>将 <code>dhcp</code> 更改为 <code>static</code>，然后添加 <code>address</code>、<code>netmask</code>、<code>gateway</code> 和 <code>dns-nameservers</code> 参数。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">iface eth0 inet static</span><br><span class="line">    address <span class="number">192.168</span><span class="number">.1</span><span class="number">.11</span></span><br><span class="line">    netmask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br><span class="line">    gateway <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span></span><br><span class="line">    dns-nameservers <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span> <span class="number">8.8</span><span class="number">.4</span><span class="number">.4</span></span><br></pre></td></tr></table></figure>

<p>确保使用适当的 IP 地址、子网掩码、网关和 DNS 服务器替换上述示例中的值。</p>
<p>修改后文件如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This file describes the network interfaces available on your system</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">and how to activate them. For more information, see interfaces(5).</span></span><br><span class="line"></span><br><span class="line">source /etc/network/interfaces.d/*</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The loopback network interface</span></span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The primary network interface</span></span><br><span class="line">allow-hotplug ens192</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">iface ens192 inet dhcp</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置成静态 IP</span></span><br><span class="line">iface ens192 inet static</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置 IP</span></span><br><span class="line">address 192.168.1.11</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置子网掩码</span></span><br><span class="line">netmask 255.255.255.0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置网关</span></span><br><span class="line">gateway 192.168.1.1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置 DNS 服务器，我这里设置成路由器的地址</span></span><br><span class="line">dns-nameservers 192.168.1.1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This is an autoconfigured IPv6 interface</span></span><br><span class="line">iface ens192 inet6 auto</span><br></pre></td></tr></table></figure>

<h4 id="2-3-重启网络服务"><a href="#2-3-重启网络服务" class="headerlink" title="2.3 重启网络服务"></a>2.3 重启网络服务</h4><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">service networking restart</span></span><br></pre></td></tr></table></figure>

<h4 id="2-4-查看地址"><a href="#2-4-查看地址" class="headerlink" title="2.4 查看地址"></a>2.4 查看地址</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@debian:~# ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens192: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:0a:14:07 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.1.11/24 brd 192.168.1.255 scope global ens192</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 2408:8256:a81:c14f:20c:29ff:fe0a:1407/64 scope global dynamic mngtmpaddr</span><br><span class="line">       valid_lft 206755sec preferred_lft 120355sec</span><br><span class="line">    inet6 fe80::20c:29ff:fe0a:1407/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>

<h2 id="二-小结"><a href="#二-小结" class="headerlink" title="二 小结"></a>二 小结</h2><p>从配置的过程来看，基本上都是配置文件的目录和配置项不同而已，其他基本上都差不多，毕竟原理都是一样的。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Debian</tag>
      </tags>
  </entry>
  <entry>
    <title>大模型 | CPU 模式部署运行 Qwen 2.5 大模型</title>
    <url>/posts/51728/</url>
    <content><![CDATA[<p>简单梳理下使用 vllm 通过 CPU 模式，部署运行 Qwen&#x2F;Qwen2.5-1.5B-Instruct<span id="more"></span></p>
<h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1 环境准备"></a>1 环境准备</h3><h4 id="1-1-操作系统"><a href="#1-1-操作系统" class="headerlink" title="1.1 操作系统"></a>1.1 操作系统</h4><p>使用的是 <code>Ubuntu</code> 版本号：<code>24.04.1 LTS</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># lsb_release -a</span></span><br><span class="line"></span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID:	Ubuntu</span><br><span class="line">Description:	Ubuntu <span class="number">24.04</span><span class="number">.1</span> LTS</span><br><span class="line">Release:	<span class="number">24.04</span></span><br><span class="line">Codename:	noble</span><br></pre></td></tr></table></figure>

<h4 id="1-2-conda-安装"><a href="#1-2-conda-安装" class="headerlink" title="1.2 conda 安装"></a>1.2 conda 安装</h4><p>python 环境，使用的是 <code>Miniconda</code><br>安装直接参考官方文档即可：<a href="https://docs.anaconda.com/miniconda/#quick-command-line-install">https://docs.anaconda.com/miniconda/#quick-command-line-install</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/miniconda3</span><br><span class="line">wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh</span><br><span class="line">bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3</span><br><span class="line">rm -rf ~/miniconda3/miniconda.sh</span><br></pre></td></tr></table></figure>

<p>然后激活 miniconda</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conda init bash</span><br><span class="line"></span><br><span class="line">source /root/.bashrc</span><br></pre></td></tr></table></figure>

<h4 id="1-3-conda-镜像设置"><a href="#1-3-conda-镜像设置" class="headerlink" title="1.3 conda 镜像设置"></a>1.3 conda 镜像设置</h4><p>配置镜像是为了加速安装包，使用的是 <code>清华大学</code> 镜像<br>检查用户目录下是否存在 <code>.condarc</code>，如果不存在，则通过以下命令进行创建</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conda config --<span class="built_in">set</span> show_channel_urls yes</span><br></pre></td></tr></table></figure>

<p>然后打开 .condarc 文件，设置清华大学镜像</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">show_channel_urls: true</span><br><span class="line">channels:</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">  - defaults</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  pytorch-lts: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br><span class="line">  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span><br></pre></td></tr></table></figure>

<p>保存后，通过 conda info 查看配置是否生效</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(base) root@local:~<span class="comment"># conda info</span></span><br><span class="line"></span><br><span class="line">     active environment : base</span><br><span class="line">    active env location : /root/miniconda3</span><br><span class="line">            shell level : <span class="number">1</span></span><br><span class="line">       user config file : /root/.condarc</span><br><span class="line"> populated config files : /root/.condarc</span><br><span class="line">          conda version : <span class="number">24.7</span><span class="number">.1</span></span><br><span class="line">    conda-build version : <span class="keyword">not</span> installed</span><br><span class="line">         python version : <span class="number">3.12</span><span class="number">.4</span>.final<span class="number">.0</span></span><br><span class="line">                 solver : libmamba (default)</span><br><span class="line">       virtual packages : __archspec=<span class="number">1</span>=haswell</span><br><span class="line">                          __conda=<span class="number">24.7</span><span class="number">.1</span>=<span class="number">0</span></span><br><span class="line">                          __glibc=<span class="number">2.39</span>=<span class="number">0</span></span><br><span class="line">                          __linux=<span class="number">6.8</span><span class="number">.0</span>=<span class="number">0</span></span><br><span class="line">                          __unix=<span class="number">0</span>=<span class="number">0</span></span><br><span class="line">       base environment : /root/miniconda3  (writable)</span><br><span class="line">      conda av data <span class="built_in">dir</span> : /root/miniconda3/etc/conda</span><br><span class="line">  conda av metadata url : <span class="literal">None</span></span><br><span class="line">           channel URLs : https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/linux-<span class="number">64</span></span><br><span class="line">                          https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/noarch</span><br><span class="line">                          https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/linux-<span class="number">64</span></span><br><span class="line">                          https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/noarch</span><br><span class="line">                          https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/linux-<span class="number">64</span></span><br><span class="line">                          https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/noarch</span><br><span class="line">                          https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/linux-<span class="number">64</span></span><br><span class="line">                          https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/noarch</span><br><span class="line">                          https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/linux-<span class="number">64</span></span><br><span class="line">                          https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/noarch</span><br><span class="line">                          https://repo.anaconda.com/pkgs/main/linux-<span class="number">64</span></span><br><span class="line">                          https://repo.anaconda.com/pkgs/main/noarch</span><br><span class="line">                          https://repo.anaconda.com/pkgs/r/linux-<span class="number">64</span></span><br><span class="line">                          https://repo.anaconda.com/pkgs/r/noarch</span><br><span class="line">          package cache : /root/miniconda3/pkgs</span><br><span class="line">                          /root/.conda/pkgs</span><br><span class="line">       envs directories : /root/miniconda3/envs</span><br><span class="line">                          /root/.conda/envs</span><br><span class="line">               platform : linux-<span class="number">64</span></span><br><span class="line">             user-agent : conda/<span class="number">24.7</span><span class="number">.1</span> requests/<span class="number">2.32</span><span class="number">.3</span> CPython/<span class="number">3.12</span><span class="number">.4</span> Linux/<span class="number">6.8</span><span class="number">.0</span>-<span class="number">47</span>-generic ubuntu/<span class="number">24.04</span><span class="number">.1</span> glibc/<span class="number">2.39</span> solver/libmamba conda-libmamba-solver/<span class="number">24.7</span><span class="number">.0</span> libmambapy/<span class="number">1.5</span><span class="number">.8</span> aau/<span class="number">0.4</span><span class="number">.4</span> c/. s/. e/.</span><br><span class="line">                UID:GID : <span class="number">0</span>:<span class="number">0</span></span><br><span class="line">             netrc file : <span class="literal">None</span></span><br><span class="line">           offline mode : <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<h4 id="1-4-创建虚拟环境"><a href="#1-4-创建虚拟环境" class="headerlink" title="1.4 创建虚拟环境"></a>1.4 创建虚拟环境</h4><p>创建环境名为 <code>ravllm</code> 的虚拟环境，使用的是 <code>Python 3.10</code>，然后激活</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conda create --name ravllM python=<span class="number">3.10</span> -y</span><br><span class="line"></span><br><span class="line">conda activate ravllM</span><br></pre></td></tr></table></figure>

<h4 id="1-5-安装-vllm"><a href="#1-5-安装-vllm" class="headerlink" title="1.5 安装 vllm"></a>1.5 安装 vllm</h4><p>因为 vllm 默认支持 GPU，所以需要安装 CPU 版本，则需要自行编译安装</p>
<blockquote>
<p>🔥 如果你有 GPU 显卡，建议直接使用 GPU 版本</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install vllm</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p>🔥 如果你没有 GPU 显卡，如果用 CPU 版本，则需要自行编译安装</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 gcc 编译器</span></span><br><span class="line">apt update  -y</span><br><span class="line">apt install -y gcc-12 g++-12 libnuma-dev</span><br><span class="line">update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 10 --slave /usr/bin/g++ g++ /usr/bin/g++-12</span><br><span class="line">apt install -y cmake</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">克隆 vllm 仓库</span></span><br><span class="line">mkdir ~/codespace &amp;&amp; cd ~/codespace</span><br><span class="line">git clone https://github.com/vllm-project/vllm.git vllm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 vllm 仓库所需的依赖</span></span><br><span class="line">cd vllm</span><br><span class="line">pip install wheel packaging ninja &quot;setuptools&gt;=49.4.0&quot; numpy</span><br><span class="line">pip install -v -r requirements-cpu.txt --extra-index-url https://download.pytorch.org/whl/cpu</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打包安装</span></span><br><span class="line">VLLM_TARGET_DEVICE=cpu python setup.py install</span><br></pre></td></tr></table></figure>

<h3 id="2-大模型下载"><a href="#2-大模型下载" class="headerlink" title="2 大模型下载"></a>2 大模型下载</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 git 环境</span></span><br><span class="line">apt install -y git git-lfs</span><br><span class="line">git lfs install</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 git 下载大模型</span></span><br><span class="line">mkdir -p ~/modelspace &amp;&amp; cd ~/modelspace</span><br><span class="line">git clone https://huggingface.co/Qwen/Qwen2.5-1.5B-Instruct Qwen2.5-1.5B-Instruct</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>如果从 <a href="https://huggingface.co/">https://huggingface.co</a> 下载较慢，可以从国内的 <a href="https://www.modelscope.cn/">https://www.modelscope.cn</a> 进行下载</li>
<li>当然也可以通过 sdk 或者命令行的方式进行下载，可以自行参考官方文档</li>
</ul>
<p>clone 完后，查看下大模型目录结构</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(base) root@local:~/modelspace/Qwen2.5-1.5B-Instruct# ls -lah</span><br><span class="line">total 2.9G</span><br><span class="line">drwxr-xr-x 3 root root 4.0K Oct 30 06:05 .</span><br><span class="line">drwxr-xr-x 5 root root 4.0K Oct 30 07:11 ..</span><br><span class="line">-rw-r--r-- 1 root root  660 Oct 30 06:05 config.json</span><br><span class="line">-rw-r--r-- 1 root root  242 Oct 30 06:05 generation_config.json</span><br><span class="line">drwxr-xr-x 8 root root 4.0K Oct 30 06:07 .git</span><br><span class="line">-rw-r--r-- 1 root root 1.5K Oct 30 06:05 .gitattributes</span><br><span class="line">-rw-r--r-- 1 root root  12K Oct 30 06:05 LICENSE</span><br><span class="line">-rw-r--r-- 1 root root 1.6M Oct 30 06:05 merges.txt</span><br><span class="line">-rw-r--r-- 1 root root 2.9G Oct 30 06:05 model.safetensors</span><br><span class="line">-rw-r--r-- 1 root root 4.9K Oct 30 06:05 README.md</span><br><span class="line">-rw-r--r-- 1 root root 7.2K Oct 30 06:05 tokenizer_config.json</span><br><span class="line">-rw-r--r-- 1 root root 6.8M Oct 30 06:05 tokenizer.json</span><br><span class="line">-rw-r--r-- 1 root root 2.7M Oct 30 06:05 vocab.json</span><br></pre></td></tr></table></figure>

<h3 id="3-模型部署"><a href="#3-模型部署" class="headerlink" title="3 模型部署"></a>3 模型部署</h3><h4 id="3-1-直接通过脚本"><a href="#3-1-直接通过脚本" class="headerlink" title="3.1 直接通过脚本"></a>3.1 直接通过脚本</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> AutoTokenizer</span><br><span class="line"><span class="keyword">from</span> vllm <span class="keyword">import</span> LLM, SamplingParams</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line">os.environ[<span class="string">&#x27;VLLM_TARGET_DEVICE&#x27;</span>] = <span class="string">&#x27;cpu&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型 ID：我们下载的模型权重文件目录</span></span><br><span class="line">model_dir = <span class="string">&#x27;/root/modelspace/Qwen2.5-1.5B-Instruct&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Tokenizer 初始化</span></span><br><span class="line">tokenizer = AutoTokenizer.from_pretrained(</span><br><span class="line">    model_dir,</span><br><span class="line">    local_files_only=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">messages = [</span><br><span class="line">    &#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;system&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;You are a helpful assistant.&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;跟我讲讲股市运行的逻辑&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line">text = tokenizer.apply_chat_template(</span><br><span class="line">    messages,</span><br><span class="line">    tokenize=<span class="literal">False</span>,</span><br><span class="line">    add_generation_prompt=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">llm = LLM(</span><br><span class="line">    model=model_dir,</span><br><span class="line">    tensor_parallel_size=<span class="number">1</span>,</span><br><span class="line">    device=<span class="string">&#x27;cpu&#x27;</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">sampling_params = SamplingParams(temperature=<span class="number">0.7</span>, top_p=<span class="number">0.8</span>, repetition_penalty=<span class="number">1.05</span>, max_tokens=<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">outputs = llm.generate([text], sampling_params)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> output <span class="keyword">in</span> outputs:</span><br><span class="line">    prompt = output.prompt</span><br><span class="line">    generated_text = output.outputs[<span class="number">0</span>].text</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;提示词：<span class="subst">&#123;prompt!r&#125;</span>, 大模型推理结果输出：<span class="subst">&#123;generated_text!r&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>然后在激活的 ravllm 环境下运行此脚本，在结果未输出之前，看下内存和 CPU 的状态<br><img src="/posts/51728/cpu-status.png" alt="cpu-status.png"></p>
<p>可以看到 16 核的 CPU 都在努力的工作。</p>
<p>推理结束，推理结果如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(ravllm) root@local:~/lmcode/25# python local.py</span><br><span class="line">INFO 10-31 08:51:52 importing.py:13] Triton not installed; certain</span><br><span class="line">GPU-related functions will not be available.</span><br><span class="line">WARNING 10-31 08:52:02 config.py:421] Async output processing is</span><br><span class="line">only supported for CUDA, TPU, XPU. Disabling it for other platforms.</span><br><span class="line"></span><br><span class="line">INFO 10-31 08:52:02 llm_engine.py:240] Initializing an LLM engine</span><br><span class="line">(v0.6.3.post2.dev76+g51c24c97) with config: model=&#x27;/root/modelspace/</span><br><span class="line">Qwen2.5-1.5B-Instruct&#x27;, speculative_config=None, tokenizer=&#x27;/root/</span><br><span class="line">modelspace/Qwen2.5-1.5B-Instruct&#x27;, skip_tokenizer_init=False,</span><br><span class="line">tokenizer_mode=auto, revision=None, override_neuron_config=None,</span><br><span class="line">rope_scaling=None, rope_theta=None, tokenizer_revision=None,</span><br><span class="line">trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=32768,</span><br><span class="line">download_dir=None, load_format=LoadFormat.AUTO,</span><br><span class="line">tensor_parallel_size=1, pipeline_parallel_size=1,</span><br><span class="line">disable_custom_all_reduce=False, quantization=None,</span><br><span class="line">enforce_eager=False, kv_cache_dtype=auto,</span><br><span class="line">quantization_param_path=None, device_config=cpu,</span><br><span class="line">decoding_config=DecodingConfig(guided_decoding_backend=&#x27;outlines&#x27;),</span><br><span class="line">observability_config=ObservabilityConfig(otlp_traces_endpoint=None,</span><br><span class="line">collect_model_forward_time=False, collect_model_execute_time=False),</span><br><span class="line">seed=0, served_model_name=/root/modelspace/Qwen2.5-1.5B-Instruct,</span><br><span class="line">num_scheduler_steps=1, chunked_prefill_enabled=False</span><br><span class="line">multi_step_stream_outputs=True, enable_prefix_caching=False,</span><br><span class="line">use_async_output_proc=False, use_cached_outputs=False,</span><br><span class="line">mm_processor_kwargs=None)</span><br><span class="line"></span><br><span class="line">WARNING 10-31 08:52:03 cpu_executor.py:332] CUDA graph is not</span><br><span class="line">supported on CPU, fallback to the eager mode.</span><br><span class="line"></span><br><span class="line">WARNING 10-31 08:52:03 cpu_executor.py:362] Environment variable</span><br><span class="line">VLLM_CPU_KVCACHE_SPACE (GB) for CPU backend is not set, using 4 by</span><br><span class="line">default.</span><br><span class="line">INFO 10-31 08:52:03 selector.py:193]</span><br><span class="line">Cannot use _Backend.FLASH_ATTN backend on CPU.</span><br><span class="line">INFO 10-31 08:52:03 selector.py:131] Using Torch SDPA backend.</span><br><span class="line">INFO 10-31 08:52:03 selector.py:193]</span><br><span class="line">Cannot use _Backend.FLASH_ATTN backend on CPU.</span><br><span class="line">INFO 10-31 08:52:03 selector.py:131] Using Torch SDPA backend.</span><br><span class="line">Loading safetensors checkpoint shards:   0% Completed | 0/1 [00:00&lt;?, ?it/s]</span><br><span class="line">Loading safetensors checkpoint shards: 100% Completed | 1/1 [00:00&lt;00:00,  1.43it/s]</span><br><span class="line">Loading safetensors checkpoint shards: 100% Completed | 1/1 [00:00&lt;00:00,  1.43it/s]</span><br><span class="line"></span><br><span class="line">INFO 10-31 08:52:05 cpu_executor.py:214] # CPU blocks: 9362</span><br><span class="line">Processed prompts:   0%|                  | 0/1</span><br><span class="line">[00:00&lt;?, ?it/s, eProcessed prompts: 100%|█| 1/1</span><br><span class="line">[07:28&lt;00:00 44833s Processed prompts: 100%|█| 1/1</span><br><span class="line">[07:28&lt;00:00, 448.33s</span><br><span class="line">Prompt提示词:</span><br><span class="line">&#x27;&lt;|im_start|&gt;system\nYou are a helpful assistant.&lt;|im_end|&gt;\n</span><br><span class="line">&lt;|im_start|&gt;user\n跟我讲讲股市运行的逻辑&lt;|im_end|&gt;\n</span><br><span class="line">&lt;|im_start|&gt;assistant\n&#x27;,</span><br><span class="line">大模型推理输出: &#x27;股市是一个复杂的市场，其运行受到多种</span><br><span class="line">因素的影响。以下是一些基本的逻辑：\n\n1. 供求关系：股票价格通常由供给和需求决定。</span><br><span class="line">如果市场上有更多的人想要购买股票，而供应者却有限，那么股票的价格就会上升。反之，如</span><br><span class="line">果供应量大于需求量，股票的价格就会下降。\n\n2. 公司基本面：公司的财务状况、盈利能</span><br><span class="line">力、增长潜力等因素都会影响股票价格。投资者会关注公司的盈利预测、市盈率、股息支付等</span><br><span class="line">指标。\n\n3. 市场情绪：市场情绪也会影响股票价格。例如，在经济衰退时期，投资者可能</span><br><span class="line">会更加谨慎，从而导致股票价格下跌。而在经济繁荣时期，投资者可能会更加乐观，导致股票</span><br><span class="line">价格上涨。\n\n4. 利率水平：利率水平也会影响股票价格。当利率上升时，投资者可能会更</span><br><span class="line">愿意将资金投资于债券等固定收益产品，而不是股票，从而导致股票价格下跌。相反，当利率</span><br><span class="line">下降时，股票价格可能会上涨。\n\n5. 外部事件：外部事件，如自然灾害、政策变化、地缘</span><br><span class="line">政治冲突等，也可能对股市产生重大影响。\n\n需要注意的是，这些因素并不是独立的，它们</span><br><span class="line">之间可能存在相互作用。此外，股市价格也会受到其他各种因素的影响，如公司业绩、新闻报</span><br><span class="line">道、市场预期等。因此，投资者需要综合考虑各种因素，并结合自己的投资策略进行决策。&#x27;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>大模型</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql | 索引查询</title>
    <url>/posts/8256/</url>
    <content><![CDATA[<p>发现了一个非常好用的方法，就是使用索引查询<span id="more"></span>，</p>
<blockquote>
<p>mysql 版本：8.x</p>
</blockquote>
<h2 id="1-查询语法"><a href="#1-查询语法" class="headerlink" title="1 查询语法"></a>1 查询语法</h2><h3 id="1-1-语法解读"><a href="#1-1-语法解读" class="headerlink" title="1.1 语法解读"></a>1.1 语法解读</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> [EXTENDED] &#123;INDEX <span class="operator">|</span> INDEXES <span class="operator">|</span> KEYS&#125;</span><br><span class="line">    &#123;<span class="keyword">FROM</span> <span class="operator">|</span> <span class="keyword">IN</span>&#125; tbl_name</span><br><span class="line">    [&#123;<span class="keyword">FROM</span> <span class="operator">|</span> <span class="keyword">IN</span>&#125; db_name]</span><br><span class="line">    [<span class="keyword">WHERE</span> expr]</span><br></pre></td></tr></table></figure>

<p><strong>语法解读</strong><br>这是 <code>SHOW INDEX</code> 命令的完整语法，下面我将逐个解释每个部分：</p>
<ul>
<li><code>SHOW</code>：这是开始执行命令的关键字。</li>
<li><code>[EXTENDED]</code>：这是一个可选的关键字，如果使用了，它会显示隐藏的索引。</li>
<li><code>&#123;INDEX | INDEXES | KEYS&#125;</code>：你可以选择其中任何一个关键字，它们都可以用来查看索引信息。这三个关键字在功能上是等价的。</li>
<li><code>&#123;FROM | IN&#125;</code>：这两个关键字在这里的功能也是等价的，它们用来指定我们将从哪个表查看索引信息。</li>
<li><code>tbl_name</code>：这是你想要查看索引信息的表的名称。</li>
<li><code>[ &#123;FROM | IN&#125; db_name ]</code>：这是一个可选的部分，用来指定 <code>tbl_name</code> 所在的数据库。如果你已经使用 <code>USE db_name;</code> 选择了数据库，那么你可以省略这部分。</li>
<li><code>[WHERE expr]</code>：这也是一个可选的部分，可以用来过滤结果。你可以提供一个条件表达式来限制返回的行。例如，你可以使用 <code>WHERE Key_name = &#39;PRIMARY&#39;</code> 来只显示主键的信息。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> my_table <span class="keyword">FROM</span> my_database <span class="keyword">WHERE</span> Key_name <span class="operator">=</span> <span class="string">&#x27;PRIMARY&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>这个命令将显示数据库 <code>my_database`` 中表 </code>my_table&#96;&#96; 的主键信息。</p>
<h3 id="1-2-提醒"><a href="#1-2-提醒" class="headerlink" title="1.2 提醒"></a>1.2 提醒</h3><p><strong>An alternative to tbl_name FROM db_name syntax is db_name.tbl_name</strong>. 下面这两条语句是等价的。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> mytable <span class="keyword">FROM</span> mydb;</span><br><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> mydb.mytable;</span><br></pre></td></tr></table></figure>

<h2 id="2-结果字段"><a href="#2-结果字段" class="headerlink" title="2 结果字段"></a>2 结果字段</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">show</span> extended index <span class="keyword">from</span> country <span class="keyword">in</span> mybatis <span class="keyword">where</span> Column_name <span class="operator">=</span> <span class="string">&#x27;id&#x27;</span> \G;</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">        <span class="keyword">Table</span>: country</span><br><span class="line">   Non_unique: <span class="number">0</span></span><br><span class="line">     Key_name: <span class="keyword">PRIMARY</span></span><br><span class="line"> Seq_in_index: <span class="number">1</span></span><br><span class="line">  Column_name: id</span><br><span class="line">    <span class="keyword">Collation</span>: A</span><br><span class="line">  <span class="keyword">Cardinality</span>: <span class="number">5</span></span><br><span class="line">     Sub_part: <span class="keyword">NULL</span></span><br><span class="line">       Packed: <span class="keyword">NULL</span></span><br><span class="line">         <span class="keyword">Null</span>:</span><br><span class="line">   Index_type: BTREE</span><br><span class="line">      Comment:</span><br><span class="line">Index_comment:</span><br><span class="line">      Visible: YES</span><br><span class="line">   Expression: <span class="keyword">NULL</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>下面针对查询结果中每个字段给出详细的解释：</p>
<ul>
<li><p><strong>Table</strong><br>表名。</p>
</li>
<li><p><strong>Non_unique</strong><br>如果索引不能包含重复项，则为 <code>0</code>；如果可以，则为 <code>1</code>。也就是我们平时所说的唯一索引</p>
</li>
<li><p><strong>Key_name</strong><br>索引的名称，如果名字相同则表明是同一个索引，而并不是重复，名字相同的是联合索引。如果索引是主键索引，那么索引名称永远都是 <code>PRIMARY</code></p>
</li>
<li><p><strong>Seq_in_index</strong><br>索引中的列序号，对于多列索引，第一列为 <code>1</code>，第二列为 <code>2</code>，依此类推。</p>
</li>
<li><p><strong>Column_name</strong><br>索引的列名。</p>
</li>
<li><p><strong>Collation</strong><br>列在索引中的排序方式。有 <code>A（升序）</code>，<code>D（降序）</code>，<code>NULL（无排序）</code>。</p>
</li>
<li><p><strong>Cardinality</strong><br>索引中唯一值的数目的估计值。对于非唯一索引，该值是 <code>NULL</code>。要更新这个数字，请运行 <code> ANALYZE TABLE</code> 或（对于 <code>MyISAM</code> 表）<code>myisamchk -a</code>。</p>
<p>我们知道某个字段的重复值越少越适合建索引，所以我们一般都是根据 <code>Cardinality</code> 来判断索引是否具有高选择性，如果这个值非常小，那就需要重新评估这个字段是否适合建立索引。<code>Cardinality</code> 越大，使用此索引的机会就越大。</p>
</li>
<li><p><strong>Sub_part</strong><br>前置索引的意思，如果列只是被部分地编入索引，则为被编入索引的字符数。对于完全编入索引的列，此值为 <code>NULL</code>。</p>
</li>
<li><p><strong>Packed</strong><br>MySQL 用来使索引更小的数据压缩方式。此值通常为 <code>NULL</code>。压缩一般包括压缩传输协议、压缩列解决方案和压缩表解决方案。</p>
</li>
<li><p><strong>Null</strong><br>如果列可能包含 <code>NULL</code> 值，则为 <code>YES</code>；否则，则为 <code>NO</code>。</p>
</li>
<li><p><strong>Index_type</strong><br>使用的索引方法（例如 <code>BTREE, FULLTEXT, HASH, RTREE</code>）。</p>
</li>
<li><p><strong>Comment</strong><br>索引列中未说明的有关索引的信息，例如，如果索引已禁用，则表示已禁用。</p>
</li>
<li><p><strong>Index_comment</strong><br>这个字段包含了在创建索引时指定的注释。例如，在执行 <code>CREATE INDEX</code> 或 <code>ALTER TABLE</code> 语句时，你可以使用 <code>COMMENT</code> 选项来添加注释。。</p>
</li>
<li><p><strong>Visible</strong><br>这个字段在 <code>MySQL 8.0.12</code> 及之后的版本中被引入。它表明索引是否是可见的。如果索引是可见的（<code>Visible</code> 的值为 <code>YES</code>），那么优化器可以选择使用这个索引来执行查<br>询。如果索引是不可见的（<code>Visible</code> 的值为 <code>NO</code>），那么优化器将不会使用这个索引来执行查询。</p>
</li>
<li><p><strong>Expression</strong><br>关于索引的一些注解信息。</p>
</li>
</ul>
<p>请注意，如果你要查看的表在一个特定的数据库中，你可能需要先使用 <code>USE database_name;</code> 来选择那个数据库。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>简单备份文件并发送到指定邮箱</title>
    <url>/posts/13676/</url>
    <content><![CDATA[<h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1 背景"></a>1 背景</h3><p>一哥们发了个诉求，总觉得自己的服务器不安全，想搞个定时备份文件并发送到自己的邮箱</p>
<span id="more"></span>

<h3 id="2-实现代码如下"><a href="#2-实现代码如下" class="headerlink" title="2 实现代码如下"></a>2 实现代码如下</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> absolute_import, unicode_literals</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> logging.config</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"><span class="keyword">from</span> email.mime.application <span class="keyword">import</span> MIMEApplication</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"></span><br><span class="line">name = datetime.datetime.now().strftime(<span class="string">&quot;%Y%m%d%H%M%S&quot;</span>)</span><br><span class="line">base_path = <span class="string">&#x27;/root/xxxx/temp&#x27;</span></span><br><span class="line">zip_path = <span class="string">&#x27;/root/xxxx/backup/&#123;&#125;.tar.bz2&#x27;</span>.<span class="built_in">format</span>(name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_logging</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    log_dir, log_file = <span class="string">&#x27;/root/xxxx/logs&#x27;</span>, <span class="string">&#x27;/root/xxxx/logs/backup.log&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(log_dir):</span><br><span class="line">        os.mkdir(log_dir)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(log_file):</span><br><span class="line">        <span class="built_in">open</span>(log_file, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    DEFAULT_LOGGING = &#123;</span><br><span class="line">        <span class="string">&#x27;version&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&#x27;disable_existing_loggers&#x27;</span>: <span class="literal">False</span>,</span><br><span class="line">        <span class="string">&#x27;formatters&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;formatone&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;format&#x27;</span>: <span class="string">&#x27;[%(asctime)s] %(levelname)s : %(message)s&#x27;</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;handlers&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;file&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;DEBUG&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;filename&#x27;</span>: <span class="string">&#x27;/root/xxxx/logs/backup.log&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;formatter&#x27;</span>: <span class="string">&#x27;formatone&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;logging.handlers.RotatingFileHandler&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;maxBytes&#x27;</span>: <span class="number">100</span> * <span class="number">1024</span> * <span class="number">1024</span>,</span><br><span class="line">                <span class="string">&#x27;backupCount&#x27;</span>: <span class="number">10</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;loggers&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;backup&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;handlers&#x27;</span>: [<span class="string">&#x27;file&#x27;</span>],</span><br><span class="line">                <span class="string">&#x27;level&#x27;</span>: <span class="string">&#x27;INFO&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    logging.config.dictConfig(DEFAULT_LOGGING)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">zip_files</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;zip files&quot;&quot;&quot;</span></span><br><span class="line">    os.system(<span class="string">&#x27;tar -cjf &#123;&#125; -C &#123;&#125; data&#x27;</span>.<span class="built_in">format</span>(zip_path, base_path))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sendmail</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;send mail&quot;&quot;&quot;</span></span><br><span class="line">    set_logging()</span><br><span class="line">    zip_files()</span><br><span class="line"></span><br><span class="line">    logger = logging.getLogger(<span class="string">&#x27;backup&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    mail_from, password = <span class="string">&#x27;xxxxxxx@aliyun.com&#x27;</span>, <span class="string">&#x27;xxxxxxx&#x27;</span></span><br><span class="line">    mail_to = <span class="string">&#x27;xxxxx@qq.com&#x27;</span></span><br><span class="line">    smtp_server = <span class="string">&#x27;smtp.aliyun.com&#x27;</span></span><br><span class="line"></span><br><span class="line">    msgRoot = MIMEMultipart(<span class="string">&#x27;related&#x27;</span>)</span><br><span class="line">    msgRoot[<span class="string">&#x27;Subject&#x27;</span>] = <span class="string">&#x27;send backup files &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name)</span><br><span class="line">    msgRoot[<span class="string">&#x27;From&#x27;</span>] = <span class="string">&#x27;&#123;&#125;&lt;&#123;&#125;&gt;&#x27;</span>.<span class="built_in">format</span>(Header(<span class="string">&#x27;backup&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>), mail_from)</span><br><span class="line">    msgRoot[<span class="string">&#x27;To&#x27;</span>] = mail_to</span><br><span class="line"></span><br><span class="line">    msgText = MIMEText(<span class="string">&#x27;backup files&#x27;</span>, <span class="string">&#x27;plain&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    msgRoot.attach(msgText)</span><br><span class="line"></span><br><span class="line">    zip_con = MIMEApplication(<span class="built_in">open</span>(zip_path,<span class="string">&#x27;rb&#x27;</span>).read())</span><br><span class="line">    zip_con.add_header(<span class="string">&#x27;Content-Disposition&#x27;</span>, <span class="string">&#x27;attachment&#x27;</span>,</span><br><span class="line">                       filename=<span class="string">&#x27;&#123;&#125;.tar.bz2&#x27;</span>.<span class="built_in">format</span>(name))</span><br><span class="line">    msgRoot.attach(zip_con)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        server = smtplib.SMTP_SSL(smtp_server)</span><br><span class="line">        server.login(mail_from, password)</span><br><span class="line">        server.sendmail(mail_from, mail_to, msgRoot.as_string())</span><br><span class="line">        server.quit()</span><br><span class="line">        logger.info(<span class="string">&#x27;send &#123;&#125; backup files success&#x27;</span>.<span class="built_in">format</span>(name))</span><br><span class="line">    <span class="keyword">except</span> Exception, e:</span><br><span class="line">        logger.error(<span class="string">&#x27;send &#123;&#125; failed &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name, e))</span><br><span class="line">        sendmail()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sendmail()</span><br></pre></td></tr></table></figure>

<h3 id="3-简单说明"><a href="#3-简单说明" class="headerlink" title="3 简单说明"></a>3 简单说明</h3><h4 id="3-1-打包文件"><a href="#3-1-打包文件" class="headerlink" title="3.1 打包文件"></a>3.1 打包文件</h4><p>这个实现比较初级，直接用 <code>shell</code> 命令进行打包</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">zip_files</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;zip files&quot;&quot;&quot;</span></span><br><span class="line">    os.system(<span class="string">&#x27;tar -cjf &#123;&#125; -C &#123;&#125; data&#x27;</span>.<span class="built_in">format</span>(zip_path, base_path))</span><br></pre></td></tr></table></figure>

<h4 id="3-2-发送邮件"><a href="#3-2-发送邮件" class="headerlink" title="3.2 发送邮件"></a>3.2 发送邮件</h4><p>这个就不说了，现成的模块直接拿来用</p>
<h4 id="3-3-日志记录"><a href="#3-3-日志记录" class="headerlink" title="3.3 日志记录"></a>3.3 日志记录</h4><p>加上日志，可以很清楚的让我知道发送情况如下，示例如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">2017</span>-<span class="number">04</span>-<span class="number">14</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">03</span>,<span class="number">251</span>] <span class="variable constant_">INFO</span> : send <span class="number">20170414000001</span> backup files success</span><br><span class="line">[<span class="number">2017</span>-<span class="number">04</span>-<span class="number">14</span> <span class="number">03</span>:<span class="number">00</span>:<span class="number">02</span>,<span class="number">620</span>] <span class="variable constant_">INFO</span> : send <span class="number">20170414030001</span> backup files success</span><br><span class="line">[<span class="number">2017</span>-<span class="number">04</span>-<span class="number">14</span> <span class="number">06</span>:<span class="number">00</span>:<span class="number">02</span>,<span class="number">406</span>] <span class="variable constant_">INFO</span> : send <span class="number">20170414060001</span> backup files success</span><br><span class="line">[<span class="number">2017</span>-<span class="number">04</span>-<span class="number">14</span> <span class="number">09</span>:<span class="number">00</span>:<span class="number">02</span>,<span class="number">349</span>] <span class="variable constant_">INFO</span> : send <span class="number">20170414090001</span> backup files success</span><br><span class="line">[<span class="number">2017</span>-<span class="number">04</span>-<span class="number">14</span> <span class="number">12</span>:<span class="number">00</span>:<span class="number">02</span>,<span class="number">299</span>] <span class="variable constant_">INFO</span> : send <span class="number">20170414120001</span> backup files success</span><br><span class="line">[<span class="number">2017</span>-<span class="number">04</span>-<span class="number">14</span> <span class="number">15</span>:<span class="number">01</span>:<span class="number">04</span>,<span class="number">696</span>] <span class="variable constant_">ERROR</span> : send <span class="number">20170414150001</span> failed [<span class="title class_">Errno</span> <span class="number">110</span>] <span class="title class_">Connection</span> timed out</span><br><span class="line">[<span class="number">2017</span>-<span class="number">04</span>-<span class="number">14</span> <span class="number">15</span>:<span class="number">01</span>:<span class="number">05</span>,<span class="number">401</span>] <span class="variable constant_">INFO</span> : send <span class="number">20170414150001</span> backup files success</span><br></pre></td></tr></table></figure>

<h4 id="3-4-定时处理"><a href="#3-4-定时处理" class="headerlink" title="3.4 定时处理"></a>3.4 定时处理</h4><p>定时这个处理，直接使用 <code>crontab</code> 命令，创建个 <code>backup_cron</code> 文件，写入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0 */3 * * *  python /root/xxxxx/backup.py</span><br></pre></td></tr></table></figure>

<h3 id="4-简单小结"><a href="#4-简单小结" class="headerlink" title="4 简单小结"></a>4 简单小结</h3><p>业务比较简单，实现也比较简单，没啥可说的</p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Django | 通用的开发包</title>
    <url>/posts/51719/</url>
    <content><![CDATA[<p>更新时间：2019-12-20 22:05:03</p>
<p>基于 <code>Django</code> 项目，通用的第三方开发工具包，这里只列出了通用的开发包，也包含了部分业务包，其他常见的涉及到具体的业务包，不再一一列出。</p>
<h4 id="1-DjangoRestFramework"><a href="#1-DjangoRestFramework" class="headerlink" title="1 DjangoRestFramework"></a>1 DjangoRestFramework</h4><p><a href="https://www.django-rest-framework.org/">https://www.django-rest-framework.org/</a></p>
<p>开发 <code>Restful</code> 接口的主力工具</p>
<h4 id="2-django-cors-headers"><a href="#2-django-cors-headers" class="headerlink" title="2 django-cors-headers"></a>2 django-cors-headers</h4><p><a href="https://github.com/adamchainz/django-cors-headers">https://github.com/adamchainz/django-cors-headers</a></p>
<p>解决前后端分离接口请求跨域</p>
<h4 id="3-django-extensions"><a href="#3-django-extensions" class="headerlink" title="3 django-extensions"></a>3 django-extensions</h4><p><a href="https://github.com/django-extensions/django-extensions">https://github.com/django-extensions/django-extensions</a></p>
<p><code>Django</code> 扩展增强工具</p>
<h4 id="4-ipython"><a href="#4-ipython" class="headerlink" title="4 ipython"></a>4 ipython</h4><p><a href="https://ipython.org/">https://ipython.org/</a></p>
<p>强大的交互式 <code>shell</code>，测试调试非常顺手，当然不仅仅限于 <code>Django</code> 开发</p>
<h4 id="5-django-environ"><a href="#5-django-environ" class="headerlink" title="5 django-environ"></a>5 django-environ</h4><p><a href="https://github.com/joke2k/django-environ">https://github.com/joke2k/django-environ</a></p>
<p>区分各种环境的配置利器</p>
<h4 id="6-celery"><a href="#6-celery" class="headerlink" title="6 celery"></a>6 celery</h4><p><a href="https://github.com/celery/celery">https://github.com/celery/celery</a></p>
<p>分布式的任务队列分发器</p>
<h4 id="7-wechatpy"><a href="#7-wechatpy" class="headerlink" title="7 wechatpy"></a>7 wechatpy</h4><p><a href="https://github.com/wechatpy/wechatpy">https://github.com/wechatpy/wechatpy</a></p>
<p>微信开发必备的 SDK</p>
<h4 id="8-gunicorn"><a href="#8-gunicorn" class="headerlink" title="8 gunicorn"></a>8 gunicorn</h4><p><a href="https://gunicorn.org/">https://gunicorn.org/</a></p>
<p><code>Python WSGI HTTP Server</code></p>
<h4 id="9-factory-boy"><a href="#9-factory-boy" class="headerlink" title="9 factory-boy"></a>9 factory-boy</h4><p><a href="https://github.com/FactoryBoy/factory_boy">https://github.com/FactoryBoy/factory_boy</a></p>
<p>测试数据生成工具</p>
<h4 id="10-parameterized"><a href="#10-parameterized" class="headerlink" title="10 parameterized"></a>10 parameterized</h4><p><a href="https://github.com/wolever/parameterized">https://github.com/wolever/parameterized</a></p>
<p>为测试用例提供参数化的，重复性支持</p>
<h4 id="11-pytest"><a href="#11-pytest" class="headerlink" title="11 pytest"></a>11 pytest</h4><p><a href="https://docs.pytest.org/en/latest/">https://docs.pytest.org/en/latest/</a></p>
<p>强大的第三方测试框架，丰富的插件集，活跃的社区</p>
<p>当然还有 <code>nose</code> 和 它的继任者 <code>nose2</code>，不过相比较而言，还是更加青睐于 <code>pytest</code></p>
<p><code>nose</code>：<a href="https://nose.readthedocs.io/en/latest/">https://nose.readthedocs.io/en/latest/</a><br><code>nose2</code>：<a href="https://github.com/nose-devs/nose2">https://github.com/nose-devs/nose2</a></p>
<p>不过 <code>nose</code> 已经不再更新，进入了维护阶段，如果使用建议使用 <code>nose2</code></p>
<h4 id="12-raven"><a href="#12-raven" class="headerlink" title="12 raven"></a>12 raven</h4><p><a href="https://raven.readthedocs.io/en/feature-federated-docs/">https://raven.readthedocs.io/en/feature-federated-docs/</a></p>
<p>这个一般都是结合 <code>Sentry</code> 使用</p>
<h4 id="13-mysqlclient"><a href="#13-mysqlclient" class="headerlink" title="13 mysqlclient"></a>13 mysqlclient</h4><p><a href="https://github.com/PyMySQL/mysqlclient-python">https://github.com/PyMySQL/mysqlclient-python</a></p>
<p>因为我使用 <code>Mysql</code> 较多</p>
<h4 id="14-django-silk"><a href="#14-django-silk" class="headerlink" title="14 django-silk"></a>14 django-silk</h4><p><a href="https://github.com/jazzband/django-silk">https://github.com/jazzband/django-silk</a></p>
<p>简单的性能监控工具</p>
<h4 id="15-django-debug-toolbar"><a href="#15-django-debug-toolbar" class="headerlink" title="15 django-debug-toolbar"></a>15 django-debug-toolbar</h4><p><a href="https://github.com/jazzband/django-debug-toolbar">https://github.com/jazzband/django-debug-toolbar</a></p>
<p><code>debug</code> 工具</p>
<h4 id="16-django-reversion"><a href="#16-django-reversion" class="headerlink" title="16 django-reversion"></a>16 django-reversion</h4><p><a href="https://github.com/etianen/django-reversion">https://github.com/etianen/django-reversion</a></p>
<p>模型版本控制</p>
<h4 id="17-whitenoise"><a href="#17-whitenoise" class="headerlink" title="17 whitenoise"></a>17 whitenoise</h4><p><a href="https://github.com/evansd/whitenoise">https://github.com/evansd/whitenoise</a></p>
<p>静态资源管理，通常是用来管理 <code>django admin</code> 和其他第三方包的静态资源。</p>
<h4 id="18-django-sql-explorer"><a href="#18-django-sql-explorer" class="headerlink" title="18 django-sql-explorer"></a>18 django-sql-explorer</h4><p><a href="https://github.com/groveco/django-sql-explorer">https://github.com/groveco/django-sql-explorer</a></p>
<p><code>SQL</code> 运行查询辅助工具</p>
<h4 id="19-django-import-export"><a href="#19-django-import-export" class="headerlink" title="19 django-import-export"></a>19 django-import-export</h4><p><a href="https://github.com/django-import-export/django-import-export">https://github.com/django-import-export/django-import-export</a></p>
<p>数据导入导出</p>
<h4 id="20-django-compressor"><a href="#20-django-compressor" class="headerlink" title="20 django-compressor"></a>20 django-compressor</h4><p><a href="https://django-compressor.readthedocs.io/en/stable/">https://django-compressor.readthedocs.io/en/stable/</a></p>
<p>合并静态资源，减少网络请求，一般使用在 <code>django admin</code> 中。</p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django | 信号使用思考</title>
    <url>/posts/51727/</url>
    <content><![CDATA[<p>重拾些许关于信号模块使用的记忆，记录对于 <code>Django</code> 信号使用的思考。 <span id="more"></span></p>
<blockquote>
<p>本文使用的 Django 的版本是 4.2</p>
</blockquote>
<h1 id="1-源码注释"><a href="#1-源码注释" class="headerlink" title="1 源码注释"></a>1 源码注释</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> weakref</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.utils.inspect <span class="keyword">import</span> func_accepts_kwargs</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(<span class="string">&quot;django.dispatch&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_make_id</span>(<span class="params">target</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    对传递进来的函数生成对应的标识，这里使用了 id 函数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果对象具有 __func__ 属性，则意味着函数是类中的函数</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hasattr</span>(target, <span class="string">&quot;__func__&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">id</span>(target.__self__), <span class="built_in">id</span>(target.__func__))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">id</span>(target)</span><br><span class="line"></span><br><span class="line"><span class="comment"># None 对应的标识，意味着无意义的键</span></span><br><span class="line">NONE_ID = _make_id(<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># A marker for caching</span></span><br><span class="line">NO_RECEIVERS = <span class="built_in">object</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Signal</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Base class for all signals</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Internal attributes:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        receivers</span></span><br><span class="line"><span class="string">            &#123; receiverkey (id) : weakref(receiver) &#125;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, use_caching=<span class="literal">False</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        创建一个新的信号对象</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Create a new signal.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 接收器列表，好比订阅者列表</span></span><br><span class="line">        <span class="variable language_">self</span>.receivers = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Django 的 Signal 系统需要处理多线程环境中的并发问题。在多线程应用中，可能会有</span></span><br><span class="line">        <span class="comment"># 多个线程同时操作 Signal 对象，例如连接或断开接收器、发送信号等。为了确保 Signal</span></span><br><span class="line">        <span class="comment"># 对象在多线程环境中的一致性和线程安全，Django 使用 threading.Lock 对关键</span></span><br><span class="line">        <span class="comment"># 部分的代码进行加锁。</span></span><br><span class="line">        <span class="variable language_">self</span>.lock = threading.Lock()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 是否使用缓存</span></span><br><span class="line">        <span class="variable language_">self</span>.use_caching = use_caching</span><br><span class="line"></span><br><span class="line">        <span class="comment"># For convenience we create empty caches even if they are not used.</span></span><br><span class="line">        <span class="comment"># A note about caching: if use_caching is defined, then for each</span></span><br><span class="line">        <span class="comment"># distinct sender we cache the receivers that sender has in</span></span><br><span class="line">        <span class="comment"># &#x27;sender_receivers_cache&#x27;. The cache is cleaned when .connect() or</span></span><br><span class="line">        <span class="comment"># .disconnect() is called and populated on send().</span></span><br><span class="line">        <span class="comment"># 缓存发送者对象和对应的接收器</span></span><br><span class="line">        <span class="variable language_">self</span>.sender_receivers_cache = weakref.WeakKeyDictionary() <span class="keyword">if</span> use_caching <span class="keyword">else</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 标识是否存在已经失效的接收器</span></span><br><span class="line">        <span class="variable language_">self</span>._dead_receivers = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self, receiver, sender=<span class="literal">None</span>, weak=<span class="literal">True</span>, dispatch_uid=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        用于将信号接收器（receiver）注册到信号对象（signal）。接收器是一个函数，当信号</span></span><br><span class="line"><span class="string">        被发送时，对应发送者所有对应的接收器将被触发</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Connect receiver to sender for signal.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Arguments:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            receiver 接收器</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                接收器是一个用来接收信号的函数或者对象的方法，接收器必须可 hash。</span></span><br><span class="line"><span class="string">                A function or an instance method which is to receive signals.</span></span><br><span class="line"><span class="string">                Receivers must be hashable objects.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                当 weak 为 True 时，接收器一定可以被弱引用。</span></span><br><span class="line"><span class="string">                If weak is True, then receiver must be weak referenceable.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                接收器必须可以接受关键字参数</span></span><br><span class="line"><span class="string">                Receivers must be able to accept keyword arguments.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                如果一个接收器（A) 连接时，使用了 dispatch_uid 参数，那么如果其他接收器（B）连接时，</span></span><br><span class="line"><span class="string">                使用了同样的 dispatch_uid，那么接收器（A）将不会被添加，即 dispatch_uid 不能重复。</span></span><br><span class="line"><span class="string">                If a receiver is connected with a dispatch_uid argument, it</span></span><br><span class="line"><span class="string">                will not be added if another receiver was already connected</span></span><br><span class="line"><span class="string">                with that dispatch_uid.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            sender 发送者</span></span><br><span class="line"><span class="string">                一个用于触发接收器响应的对象。如果为 sender 设置一个具体的对象，那么只有来自该</span></span><br><span class="line"><span class="string">                对象发送的信号才会触发接收器。如果省略 sender 参数，那么该接收器将响应所有发送者的信号。</span></span><br><span class="line"><span class="string">                在 django 的调用中，多处基本上都是类。例如 request_started 信号对应的发送者是</span></span><br><span class="line"><span class="string">                class &#x27;django.core.handlers.wsgi.WSGIHandler&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                The sender to which the receiver should respond. Must either be</span></span><br><span class="line"><span class="string">                a Python object, or None to receive events from any sender.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            weak 弱引用</span></span><br><span class="line"><span class="string">                是否使用对接收器的弱引用。默认情况下，该模块将尝试使用弱引用来引用接收器。</span></span><br><span class="line"><span class="string">                如果这个参数为 false，那么将使用强引用</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                Whether to use weak references to the receiver. By default, the</span></span><br><span class="line"><span class="string">                module will attempt to use weak references to the receiver</span></span><br><span class="line"><span class="string">                objects. If this parameter is false, then strong references will</span></span><br><span class="line"><span class="string">                be used.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            dispatch_uid</span></span><br><span class="line"><span class="string">                在可能发送重复信号的情况下，信号接收器的唯一标识符</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                一个用于唯一地标识一个特定接收器对象的标识符，它通常是一个字符串，虽然它可以是</span></span><br><span class="line"><span class="string">                任何可哈希的东西。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                An identifier used to uniquely identify a particular instance of</span></span><br><span class="line"><span class="string">                a receiver. This will usually be a string, though it may be</span></span><br><span class="line"><span class="string">                anything hashable.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line">        <span class="comment"># If DEBUG is on, check that we got a good receiver</span></span><br><span class="line">        <span class="comment"># 如果开启 DEBUG 模式，检测接收器是否符合要求</span></span><br><span class="line">        <span class="keyword">if</span> settings.configured <span class="keyword">and</span> settings.DEBUG:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">callable</span>(receiver):</span><br><span class="line">                <span class="keyword">raise</span> TypeError(<span class="string">&quot;Signal receivers must be callable.&quot;</span>)</span><br><span class="line">            <span class="comment"># Check for **kwargs</span></span><br><span class="line">            <span class="comment"># 检查接收器接收的是否都是关键字参数</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> func_accepts_kwargs(receiver):</span><br><span class="line">                <span class="keyword">raise</span> ValueError(</span><br><span class="line">                    <span class="string">&quot;Signal receivers must accept keyword arguments (**kwargs).&quot;</span></span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果指定了 dispatch_uid，则优先使用 dispatch_uid，所以针对同一个信号，同样的发送者</span></span><br><span class="line">        <span class="comment"># dispatch_uid 是不能重复的，否则后续验证 lookup_key 已经存在的话，接收器则不会加入</span></span><br><span class="line">        <span class="comment"># 到接收器列表。</span></span><br><span class="line">        <span class="keyword">if</span> dispatch_uid:</span><br><span class="line">            lookup_key = (dispatch_uid, _make_id(sender))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            lookup_key = (_make_id(receiver), _make_id(sender))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 默认使用弱引用，这个也是弱引用的妙用之处。</span></span><br><span class="line">        <span class="keyword">if</span> weak:</span><br><span class="line">            ref = weakref.ref</span><br><span class="line">            receiver_object = receiver</span><br><span class="line">            <span class="comment"># Check for bound methods</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">hasattr</span>(receiver, <span class="string">&quot;__self__&quot;</span>) <span class="keyword">and</span> <span class="built_in">hasattr</span>(receiver, <span class="string">&quot;__func__&quot;</span>):</span><br><span class="line">                ref = weakref.WeakMethod</span><br><span class="line">                receiver_object = receiver.__self__</span><br><span class="line">            receiver = ref(receiver)</span><br><span class="line">            weakref.finalize(receiver_object, <span class="variable language_">self</span>._remove_receiver)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> <span class="variable language_">self</span>.lock:</span><br><span class="line">            <span class="comment"># 清除无效的接收器</span></span><br><span class="line">            <span class="variable language_">self</span>._clear_dead_receivers()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">any</span>(r_key == lookup_key <span class="keyword">for</span> r_key, _ <span class="keyword">in</span> <span class="variable language_">self</span>.receivers):</span><br><span class="line">                <span class="comment"># 如果接收器对应的键不在信号对象的接收器列表中，则加入到接收器列表中</span></span><br><span class="line">                <span class="variable language_">self</span>.receivers.append((lookup_key, receiver))</span><br><span class="line">            <span class="comment"># 清除 sender_receivers_cache 缓存</span></span><br><span class="line">            <span class="variable language_">self</span>.sender_receivers_cache.clear()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">disconnect</span>(<span class="params">self, receiver=<span class="literal">None</span>, sender=<span class="literal">None</span>, dispatch_uid=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        为指定的发送者对象移除对应的接收器</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Disconnect receiver from sender for signal.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        如果使用了弱引用，disconnect 函数不需要调用。因为弱引用的接收器会自动移除。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        If weak references are used, disconnect need not be called. The receiver</span></span><br><span class="line"><span class="string">        will be removed from dispatch automatically.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Arguments:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            receiver</span></span><br><span class="line"><span class="string">                The registered receiver to disconnect. May be none if</span></span><br><span class="line"><span class="string">                dispatch_uid is specified.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            sender</span></span><br><span class="line"><span class="string">                The registered sender to disconnect</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            dispatch_uid</span></span><br><span class="line"><span class="string">                the unique identifier of the receiver to disconnect</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 计算索引键</span></span><br><span class="line">        <span class="keyword">if</span> dispatch_uid:</span><br><span class="line">            lookup_key = (dispatch_uid, _make_id(sender))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            lookup_key = (_make_id(receiver), _make_id(sender))</span><br><span class="line"></span><br><span class="line">        disconnected = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">with</span> <span class="variable language_">self</span>.lock:</span><br><span class="line">            <span class="variable language_">self</span>._clear_dead_receivers()</span><br><span class="line">            <span class="comment"># 通过对比索引键，如果存在，则进行删除</span></span><br><span class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>.receivers)):</span><br><span class="line">                (r_key, _) = <span class="variable language_">self</span>.receivers[index]</span><br><span class="line">                <span class="keyword">if</span> r_key == lookup_key:</span><br><span class="line">                    disconnected = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">del</span> <span class="variable language_">self</span>.receivers[index]</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># 删除完后需要重置 sender_receivers_cache 缓存</span></span><br><span class="line">            <span class="variable language_">self</span>.sender_receivers_cache.clear()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 返回是否断开的标识，数据类型为布尔型</span></span><br><span class="line">        <span class="keyword">return</span> disconnected</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">has_listeners</span>(<span class="params">self, sender=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;是否存在指定发送者有效的接收器&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bool</span>(<span class="variable language_">self</span>._live_receivers(sender))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, sender, **named</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        发送信号到指定发送者的接收器中</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Send signal from sender to all connected receivers.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        If any receiver raises an error, the error propagates back through send,</span></span><br><span class="line"><span class="string">        terminating the dispatch loop. So it&#x27;s possible that all receivers</span></span><br><span class="line"><span class="string">        won&#x27;t be called if an error is raised.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Arguments:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            sender</span></span><br><span class="line"><span class="string">                The sender of the signal. Either a specific object or None.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            named</span></span><br><span class="line"><span class="string">                Named arguments which will be passed to receivers.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Return a list of tuple pairs [(receiver, response), ... ].</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.receivers <span class="keyword">or</span> <span class="variable language_">self</span>.sender_receivers_cache.get(sender) <span class="keyword">is</span> NO_RECEIVERS:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [(receiver, receiver(signal=<span class="variable language_">self</span>, sender=sender, **named)) <span class="keyword">for</span> receiver <span class="keyword">in</span> <span class="variable language_">self</span>._live_receivers(sender)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_robust</span>(<span class="params">self, sender, **named</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Send signal from sender to all connected receivers catching errors.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Arguments:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            sender</span></span><br><span class="line"><span class="string">                The sender of the signal. Can be any Python object (normally one</span></span><br><span class="line"><span class="string">                registered with a connect if you actually want something to</span></span><br><span class="line"><span class="string">                occur).</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            named</span></span><br><span class="line"><span class="string">                Named arguments which will be passed to receivers.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Return a list of tuple pairs [(receiver, response), ... ].</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        If any receiver raises an error (specifically any subclass of</span></span><br><span class="line"><span class="string">        Exception), return the error instance as the result for that receiver.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.receivers <span class="keyword">or</span> <span class="variable language_">self</span>.sender_receivers_cache.get(sender) <span class="keyword">is</span> NO_RECEIVERS:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Call each receiver with whatever arguments it can accept.</span></span><br><span class="line">        <span class="comment"># Return a list of tuple pairs [(receiver, response), ... ].</span></span><br><span class="line">        responses = []</span><br><span class="line">        <span class="keyword">for</span> receiver <span class="keyword">in</span> <span class="variable language_">self</span>._live_receivers(sender):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                response = receiver(signal=<span class="variable language_">self</span>, sender=sender, **named)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">                logger.error(</span><br><span class="line">                    <span class="string">&quot;Error calling %s in Signal.send_robust() (%s)&quot;</span>,</span><br><span class="line">                    receiver.__qualname__,</span><br><span class="line">                    err,</span><br><span class="line">                    exc_info=err,</span><br><span class="line">                )</span><br><span class="line">                responses.append((receiver, err))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                responses.append((receiver, response))</span><br><span class="line">        <span class="keyword">return</span> responses</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_clear_dead_receivers</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;清除无效的接收器&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># Note: caller is assumed to hold self.lock.</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>._dead_receivers:</span><br><span class="line">            <span class="variable language_">self</span>._dead_receivers = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 迭代处理，获取有效的接收器</span></span><br><span class="line">            <span class="comment"># - 如果是强引用，这直接略过</span></span><br><span class="line">            <span class="comment"># - 如果是弱引用，弱引用对象执行为 None，则代表是无效的接收器</span></span><br><span class="line">            <span class="variable language_">self</span>.receivers = [</span><br><span class="line">                r <span class="keyword">for</span> r <span class="keyword">in</span> <span class="variable language_">self</span>.receivers <span class="keyword">if</span> <span class="keyword">not</span> (<span class="built_in">isinstance</span>(r[<span class="number">1</span>], weakref.ReferenceType) <span class="keyword">and</span> r[<span class="number">1</span>]() <span class="keyword">is</span> <span class="literal">None</span>)</span><br><span class="line">            ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_live_receivers</span>(<span class="params">self, sender</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        根据指定的发送者获取接收器列表</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Filter sequence of receivers to get resolved, live receivers.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        This checks for weak references and resolves them, then returning only</span></span><br><span class="line"><span class="string">        live receivers.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 初始化接收器列表对象</span></span><br><span class="line">        receivers = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果使用了缓存，同时 _dead_receivers 为 False 时</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.use_caching <span class="keyword">and</span> <span class="keyword">not</span> <span class="variable language_">self</span>._dead_receivers:</span><br><span class="line">            <span class="comment"># 直接通过发送者对象获取接收器列表</span></span><br><span class="line">            receivers = <span class="variable language_">self</span>.sender_receivers_cache.get(sender)</span><br><span class="line">            <span class="comment"># We could end up here with NO_RECEIVERS even if we do check this case in</span></span><br><span class="line">            <span class="comment"># .send() prior to calling _live_receivers() due to concurrent .send() call.</span></span><br><span class="line">            <span class="comment"># 如果接收器列表为空，则不做任何动作，直接返回</span></span><br><span class="line">            <span class="keyword">if</span> receivers <span class="keyword">is</span> NO_RECEIVERS:</span><br><span class="line">                <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果接收器列表为 None</span></span><br><span class="line">        <span class="keyword">if</span> receivers <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="variable language_">self</span>.lock:</span><br><span class="line">                <span class="comment"># 清除无效的接收器</span></span><br><span class="line">                <span class="variable language_">self</span>._clear_dead_receivers()</span><br><span class="line">                senderkey = _make_id(sender)</span><br><span class="line">                receivers = []</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 根据发送者校验，获取发送者对象对应的接收器列表</span></span><br><span class="line">                <span class="keyword">for</span> (receiverkey, r_senderkey), receiver <span class="keyword">in</span> <span class="variable language_">self</span>.receivers:</span><br><span class="line">                    <span class="comment"># 因为 sender 在有些信号对象中是为 None，所以需要判断是否是 NONE_ID</span></span><br><span class="line">                    <span class="keyword">if</span> r_senderkey == NONE_ID <span class="keyword">or</span> r_senderkey == senderkey:</span><br><span class="line">                        receivers.append(receiver)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 如果使用管理缓存，则进行缓存</span></span><br><span class="line">                <span class="keyword">if</span> <span class="variable language_">self</span>.use_caching:</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> receivers:</span><br><span class="line">                        <span class="variable language_">self</span>.sender_receivers_cache[sender] = NO_RECEIVERS</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="comment"># Note, we must cache the weakref versions.</span></span><br><span class="line">                        <span class="variable language_">self</span>.sender_receivers_cache[sender] = receivers</span><br><span class="line">        non_weak_receivers = []</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 迭代处理获取非弱引用的接收器（即正常的接收器）</span></span><br><span class="line">        <span class="keyword">for</span> receiver <span class="keyword">in</span> receivers:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(receiver, weakref.ReferenceType):</span><br><span class="line">                <span class="comment"># Dereference the weak reference.</span></span><br><span class="line">                receiver = receiver()</span><br><span class="line">                <span class="keyword">if</span> receiver <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    non_weak_receivers.append(receiver)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 如果是强引用，则直接加入</span></span><br><span class="line">                non_weak_receivers.append(receiver)</span><br><span class="line">        <span class="keyword">return</span> non_weak_receivers</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_remove_receiver</span>(<span class="params">self, receiver=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        当弱引用引用的对象不存在时，给当前的信号标识存在无效的接收器</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        标注 self.receivers 存在无效的弱引用。如果存在无效的弱引用，</span></span><br><span class="line"><span class="string">        将在 connect、disconnect 和 _live_receivers 中清理这些</span></span><br><span class="line"><span class="string">        无效的弱引用对象。</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Mark that the self.receivers list has dead weakrefs. If so, we will</span></span><br><span class="line">        <span class="comment"># clean those up in connect, disconnect and _live_receivers while</span></span><br><span class="line">        <span class="comment"># holding self.lock. Note that doing the cleanup here isn&#x27;t a good</span></span><br><span class="line">        <span class="comment"># idea, _remove_receiver() will be called as side effect of garbage</span></span><br><span class="line">        <span class="comment"># collection, and so the call can happen while we are already holding</span></span><br><span class="line">        <span class="comment"># self.lock.</span></span><br><span class="line">        <span class="variable language_">self</span>._dead_receivers = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">receiver</span>(<span class="params">signal, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    连接接收器到信号的装饰器，其内部实际上是对 connect 方法的包装，使用装饰器看起来更直观一些。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    A decorator for connecting receivers to signals. Used by passing in the</span></span><br><span class="line"><span class="string">    signal (or list of signals) and keyword arguments to connect::</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @receiver(post_save, sender=MyModel)</span></span><br><span class="line"><span class="string">        def signal_receiver(sender, **kwargs):</span></span><br><span class="line"><span class="string">            ...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @receiver([post_save, post_delete], sender=MyModel)</span></span><br><span class="line"><span class="string">        def signals_receiver(sender, **kwargs):</span></span><br><span class="line"><span class="string">            ...</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_decorator</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(signal, (<span class="built_in">list</span>, <span class="built_in">tuple</span>)):</span><br><span class="line">            <span class="keyword">for</span> s <span class="keyword">in</span> signal:</span><br><span class="line">                s.connect(func, **kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            signal.connect(func, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> func</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _decorator</span><br></pre></td></tr></table></figure>

<h1 id="2-函数清单"><a href="#2-函数清单" class="headerlink" title="2 函数清单"></a>2 函数清单</h1><h2 id="2-1-make-id-方法"><a href="#2-1-make-id-方法" class="headerlink" title="2.1 _make_id 方法"></a>2.1 _make_id 方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_make_id</span>(<span class="params">target</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">hasattr</span>(target, <span class="string">&quot;__func__&quot;</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">id</span>(target.__self__), <span class="built_in">id</span>(target.__func__))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">id</span>(target)</span><br></pre></td></tr></table></figure>

<p>首先认真分析下其业务实现，<code>target</code> 参数是接收器（即普通的函数或者是 <code>bound</code> 方法）</p>
<ul>
<li>如果是普通的函数，则使用 <code>id</code> 函数获取 <code>target</code> 的唯一标识，返回的类型是整型，即一个数字。</li>
<li>如果是 <code>bound</code> 方法，返回的结果是一个元组，其元组包含两个元素，其中第一个元素是 <code>target</code> 所关联对象的唯一标识，第二个元素是 <code>target</code> 的唯一标识。</li>
</ul>
<p>同时参考下 <code>connect</code> 方法中对 <code>_make_id</code> 的调用，下面摘取一些片段</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> dispatch_uid:</span><br><span class="line">    lookup_key = (dispatch_uid, _make_id(sender))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    lookup_key = (_make_id(receiver), _make_id(sender))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 省略代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="variable language_">self</span>.lock:</span><br><span class="line">    <span class="comment"># 省略代码</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">any</span>(r_key == lookup_key <span class="keyword">for</span> r_key, _ <span class="keyword">in</span> <span class="variable language_">self</span>.receivers):</span><br><span class="line">        <span class="comment"># 如果接收器对应的键不在信号对象的接收器列表中，则加入到接收器列表中</span></span><br><span class="line">        <span class="variable language_">self</span>.receivers.append((lookup_key, receiver))</span><br><span class="line">    <span class="comment"># 省略代码</span></span><br></pre></td></tr></table></figure>

<p>可以清楚的看到 <code>lookup_key</code> 是一个元组，因为我们这里重点关注了接收器，所以就元组的第一个元素做些说明，元组的第一个元素，根据接收器的类型，所以有可能是一个数字，也有可能是一个元组。接下来使用一个示例验证下。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.signals <span class="keyword">import</span> request_started</span><br><span class="line"><span class="keyword">from</span> django.dispatch <span class="keyword">import</span> receiver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomSignal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bound_method</span>(<span class="params">self, signal=<span class="literal">None</span>, sender=<span class="literal">None</span>, environ=<span class="literal">None</span>, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;bound method receiver run&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(request_started.receivers)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">custom_signal = CustomSignal()</span><br><span class="line">request_started.connect(custom_signal.bound_method)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@receiver(<span class="params">request_started</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">common_function</span>(<span class="params">signal=<span class="literal">None</span>, sender=<span class="literal">None</span>, environ=<span class="literal">None</span>, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;common method receiver run&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>这个示例针对 request_started 信号做了两个接收器</p>
<ul>
<li><code>bound</code> 方法：custom_signal.bound_method</li>
<li>普通函数：common_function</li>
</ul>
<p>然后执行后看下结果：</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">bound <span class="keyword">method</span> <span class="title function_">receiver</span> <span class="title function_">run</span></span><br><span class="line">[</span><br><span class="line">    <span class="params">((4507063040, 4496364336)</span>, &lt;<span class="title function_">weakref</span> <span class="title function_">at</span> 0<span class="title function_">x10ca179c0</span>; <span class="keyword">to</span> <span class="string">&#x27;function&#x27;</span> at <span class="number">0</span>x10ca45300 (reset_queries)&gt;),</span><br><span class="line">    ((<span class="number">4507064640</span>, <span class="number">4496364336</span>), &lt;weakref at <span class="number">0</span>x10ca509a0<span class="punctuation">;</span> <span class="keyword">to</span> <span class="string">&#x27;function&#x27;</span> at <span class="number">0</span>x10ca45940 (close_old_connections)&gt;),</span><br><span class="line">    (((<span class="number">4522035984</span>, <span class="number">4521976480</span>), <span class="number">4496364336</span>), &lt;weakref at <span class="number">0</span>x10d859310<span class="punctuation">;</span> <span class="keyword">to</span> <span class="string">&#x27;CustomSignal&#x27;</span> at <span class="number">0</span>x10d88cb10&gt;),</span><br><span class="line">    ((<span class="number">4521976640</span>, <span class="number">4496364336</span>), &lt;weakref at <span class="number">0</span>x10d888b80<span class="punctuation">;</span> <span class="keyword">to</span> <span class="string">&#x27;function&#x27;</span> at <span class="number">0</span>x10d87e340 (common_function)&gt;)</span><br><span class="line">]</span><br><span class="line">common <span class="keyword">method</span> <span class="title function_">receiver</span> <span class="title function_">run</span></span><br></pre></td></tr></table></figure>

<p>根据执行结果可以清楚的看到</p>
<ul>
<li>如果是 bound 方法：<code>lookup_key</code> 是 <code>((4522035984, 4521976480), 4496364336)</code>，元组的第一个元素也是一个元组，原型即 <code>(id(target.__self__), id(target.__func__))</code></li>
<li>如果是普通的函数：<code>lookup_key</code> 是 <code>(4521976640, 4496364336)</code></li>
</ul>
<h2 id="2-2-为什么要使用-threading-Lock"><a href="#2-2-为什么要使用-threading-Lock" class="headerlink" title="2.2 为什么要使用 threading.Lock"></a>2.2 为什么要使用 threading.Lock</h2><p><code>Django</code> 的 <code>Signal</code> 系统需要处理多线程环境中的并发问题。在多线程应用中，可能会有多个线程同时操作 <code>Signal</code> 对象，例如连接或断开接收器、发送信号等。为了确保 <code>Signal</code> 对象在多线程环境中的一致性和线程安全，<code>Django</code> 使用 <code>threading.Lock</code> 对关键部分的代码进行加锁。</p>
<p><code>threading.Lock</code> 是 Python 标准库中提供的一个基本同步原语，用于在线程之间提供互斥访问共享资源的能力。通过使用锁，<code>Django</code> 可以确保同一时间只有一个线程对 <code>Signal</code> 对象进行修改，避免了潜在的竞争条件和不一致问题。</p>
<p>以下是在 <code>Django Signal</code> 中使用锁的几个例子：</p>
<ul>
<li>在连接接收器时，<code>Django</code> 使用锁来确保线程安全地更新接收器列表。这可以防止在多线程环境中同时连接接收器时导致的不一致状态。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="variable language_">self</span>.lock:</span><br><span class="line">    <span class="variable language_">self</span>.receivers.append((lookup_key, receiver))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>在断开接收器时，Django 同样使用锁来确保线程安全地从接收器列表中移除接收器</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="variable language_">self</span>.lock:</span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="variable language_">self</span>.receivers)):</span><br><span class="line">        <span class="comment"># ...</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在发送信号时，Django 使用锁来确保线程安全地遍历接收器列表并调用相应的接收器。这样可以防止在发送信号的过程中修改接收器列表导致的潜在问题</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="variable language_">self</span>.lock:</span><br><span class="line">    <span class="keyword">for</span> _, receiver <span class="keyword">in</span> <span class="variable language_">self</span>.receivers:</span><br><span class="line">        <span class="comment"># ...</span></span><br></pre></td></tr></table></figure>

<p>总之，<code>Django</code> 使用 <code>threading.Lock</code> 来确保 <code>Signal</code> 对象在多线程环境中的线程安全。通过在关键代码段中使用锁，可以避免并发修改导致的不一致问题和竞争条件。这使得 Django 的 Signal 系统在多线程应用中能够可靠地工作</p>
<h2 id="2-3-sender-和-sender-robust-的区别"><a href="#2-3-sender-和-sender-robust-的区别" class="headerlink" title="2.3 sender 和 sender_robust 的区别"></a>2.3 sender 和 sender_robust 的区别</h2><p>这里通过源码可以清楚看到它们之间的区别。</p>
<p>在 <code>Django</code> 信号系统中，<code>sender</code> 和 <code>sender_robust</code> 并没有直接的区别，因为这两个词没有特定的定义。它们都是 <code>Signal</code> 类的方法，用于发送信号，但在处理接收器异常时，行为是不同的。下面详细解释这两个方法的区别：</p>
<ul>
<li><strong>send</strong>: <code>send</code> 方法用于发送信号。当使用 <code>send</code> 发送信号时，它会调用与信号关联的所有接收器。如果接收器引发异常，<code>send</code> 会将该异常抛出，导致程序中止。换句话说，<code>send</code> 在遇到接收器异常时没有错误处理机制，因此可能导致程序崩溃。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">self, sender, **named</span>):</span><br><span class="line">    <span class="comment"># ...省略部分代码</span></span><br><span class="line">    responses = []</span><br><span class="line">    <span class="keyword">for</span> receiver <span class="keyword">in</span> <span class="variable language_">self</span>._live_receivers(sender):</span><br><span class="line">        response = receiver(signal=<span class="variable language_">self</span>, sender=sender, **named)</span><br><span class="line">        responses.append((receiver, response))</span><br><span class="line">    <span class="keyword">return</span> responses</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>send_robust</strong>: <code>send_robust</code> 方法与 <code>send</code> 类似，也用于发送信号。但是，它会处理接收器抛出的异常。如果接收器引发异常，<code>send_robust</code> 会捕获异常并将其添加到响应列表，而不是中断程序。这意味着，在使用 <code>send_robust</code> 时，程序会继续运行，即使某个接收器抛出了异常。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">send_robust</span>(<span class="params">self, sender, **named</span>):</span><br><span class="line">    <span class="comment"># ...省略部分代码</span></span><br><span class="line">    responses = []</span><br><span class="line">    <span class="keyword">for</span> receiver <span class="keyword">in</span> <span class="variable language_">self</span>._live_receivers(sender):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = receiver(signal=<span class="variable language_">self</span>, sender=sender, **named)</span><br><span class="line">            responses.append((receiver, response))</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">            responses.append((receiver, err))</span><br><span class="line">    <span class="keyword">return</span> responses</span><br></pre></td></tr></table></figure>

<p>总之，<code>send</code> 和 <code>send_robust</code> 的主要区别在于它们如何处理接收器抛出的异常。<code>send</code> 方法在遇到异常时会中断程序，而 <code>send_robust</code> 会捕获异常并将其添加到响应列表，以便在后续处理。<code>send_robust</code> 为程序提供了更健壮的错误处理，因此在处理潜在的接收器错误时更安全。</p>
<h2 id="2-4-live-receivers-辅助函数"><a href="#2-4-live-receivers-辅助函数" class="headerlink" title="2.4 _live_receivers 辅助函数"></a>2.4 _live_receivers 辅助函数</h2><p><strong>_live_receivers</strong> 是一个内部辅助函数，用于筛选出有效的接收器列表。在发送信号时，<code>Django</code> 需要找到所有活跃的、有效的接收器来响应信号。由于某些接收器可能使用弱引用（<code>weak reference</code>）来避免循环引用问题，当接收器指向的对象被销毁时，弱引用将不再有效。因此，在发送信号前，需要筛选出仍然有效的接收器。</p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>DRF：书写接口的通用流程</title>
    <url>/posts/11214/</url>
    <content><![CDATA[<p>描述：书写接口的基本流程</p>
<span id="more"></span>

<p>在使用 <code>django-restful-framework</code> 写后台接口的业务中，在下通用的做法；</p>
<blockquote>
<p>前端数据数据—-&gt;检测(包含限流，认证，权限验证，数据检测)—-&gt;持久化</p>
</blockquote>
<p>其中对于限流和权限验证，都可以自定义类解决需求，重点还是在于数据检测，本着不能相信前端输入的数据的原则，要做好数据检测，也不是件轻而易举的事情，毕竟疯子的想法你是猜不透的。</p>
<p>这里针对数据检测，在这里说说我的通用做法，还是以例说明：</p>
<h3 id="1-场景：认证服务"><a href="#1-场景：认证服务" class="headerlink" title="1 场景：认证服务"></a>1 场景：认证服务</h3><p>这里只是简单的验证用户，根据用户输入的姓名，身份证号码，手机号码（需要填写手机号码是为了短信验证，这年头，不加点料，都对不起自己），验证输入的信息是否合法，当然这个验证不是很靠谱，只是为了做个例子而已，不用太当真，不然掉进了你是谁，我又是谁的黑洞，那就完蛋了。</p>
<h3 id="2-业务流程步骤"><a href="#2-业务流程步骤" class="headerlink" title="2 业务流程步骤"></a>2 业务流程步骤</h3><p>说明：代码以伪代码为主</p>
<h4 id="2-1-准备两个-serializer"><a href="#2-1-准备两个-serializer" class="headerlink" title="2.1 准备两个 serializer"></a>2.1 准备两个 serializer</h4><p>为什么要准备两个 <code>serializer</code>，因为：</p>
<ul>
<li>输入的数据结构和你期望返回的数据结构有可能是不一样的</li>
<li>业务拆分，保持业务独立，清晰</li>
</ul>
<p>检测数据的 serializer:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VerifyForm</span>(serializers.Serializer):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;验证认证用户输入数据&quot;&quot;&quot;</span></span><br><span class="line">    username = serializers.CharField(max_length=<span class="number">64</span>, min_length=<span class="number">2</span>)</span><br><span class="line">    id_number = serializers.CharField(max_length=<span class="number">18</span>, min_length=<span class="number">15</span>)</span><br><span class="line">    sms_code = serializers.CharField(max_length=<span class="number">6</span>, min_length=<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_username</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">if</span> 检测输入的用户名不合法:</span><br><span class="line">            <span class="keyword">raise</span> 异常</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_id_number</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">if</span> 检测输入的身份证号码不合法:</span><br><span class="line">            <span class="keyword">raise</span> 异常</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_sms_code</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">if</span> 检测输入的短信验证码不合法:</span><br><span class="line">            <span class="keyword">raise</span> 异常</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">self, attrs</span>):</span><br><span class="line">        <span class="keyword">if</span> 外部服务(username, id_number) 不合法:</span><br><span class="line">            <span class="keyword">raise</span> 异常</span><br><span class="line">        <span class="keyword">return</span> attrs</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">         持久化</span><br><span class="line">         <span class="keyword">return</span> instance</span><br></pre></td></tr></table></figure>

<p>序列化对象的 serializer:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">VerifySerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;序列化数据&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    你可以做点自己喜欢的事情，啊哈</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = Verify</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-书写-views"><a href="#2-2-书写-views" class="headerlink" title="2.2 书写 views"></a>2.2 书写 views</h4><p>针对创建的业务，示例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">perform_create</span>(<span class="params">self, serializer</span>):</span><br><span class="line">    <span class="keyword">return</span> serializer.save()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">    serializer = VerifyForm(data=request.data, context=&#123;<span class="string">&#x27;request&#x27;</span>: request&#125;)</span><br><span class="line">    <span class="comment"># 检验数据</span></span><br><span class="line">    serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 持久化</span></span><br><span class="line">    instance = <span class="variable language_">self</span>.perform_create(serializer)</span><br><span class="line">    <span class="comment"># 序列化数据</span></span><br><span class="line">    serializer = <span class="variable language_">self</span>.get_serializer(instance)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></table></figure>

<h3 id="3-小结"><a href="#3-小结" class="headerlink" title="3 小结"></a>3 小结</h3><p>这种做法是我通常写接口业务的流程，验证检测归验证检测，序列化归序列化，两种类型互不干扰，当然对于简单的业务你可以全部放到同一个 serializer 中，这个根据自己的业务需求走，没有更好，只有合适。</p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Django-Rest-Framework</tag>
      </tags>
  </entry>
  <entry>
    <title>Django | Mysql 返回不合法的日期时间对象</title>
    <url>/posts/26483/</url>
    <content><![CDATA[<h3 id="1-错误描述"><a href="#1-错误描述" class="headerlink" title="1 错误描述"></a>1 错误描述</h3><p>在查询数据集中的日期时间对象时</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">38</span>]: Device.objects.datetimes(<span class="string">&#x27;latest_alarm_time&#x27;</span>, <span class="string">&#x27;month&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Out[<span class="number">38</span>]: SELECT DISTINCT</span><br><span class="line">CAST(DATE_FORMAT(CONVERT_TZ(`device_device`.`latest_alarm_time`, <span class="string">&#x27;UTC&#x27;</span>, <span class="string">&#x27;Asia/Shanghai&#x27;</span>), <span class="string">&#x27;%Y-%m-01 00:00:00&#x27;</span>) AS DATETIME) AS `datetimefield` FROM `device_device` WHERE `device_device`.`latest_alarm_time` IS NOT NULL ORDER BY `datetimefield` ASC LIMIT <span class="number">21</span></span><br></pre></td></tr></table></figure>

<p>然后报错</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ValueError: Database returned an invalid datetime value. Are time zone definitions <span class="keyword">for</span> your database installed?</span><br></pre></td></tr></table></figure>

<h3 id="2-解决问题"><a href="#2-解决问题" class="headerlink" title="2 解决问题"></a>2 解决问题</h3><p>实际情况，数据库中是有数据，目测月份提取失败；到 mysql 执行了下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mysql root@localhost:py365&gt; select convert_tz(<span class="string">&#x27;2018-05-10 12:30:00&#x27;</span>, <span class="string">&#x27;UTC&#x27;</span>, <span class="string">&#x27;Asia/Shanghai&#x27;</span>);</span><br><span class="line">+-------------------------------------------------------------+</span><br><span class="line">| convert_tz(<span class="string">&#x27;2018-05-10 12:30:00&#x27;</span>, <span class="string">&#x27;UTC&#x27;</span>, <span class="string">&#x27;Asia/Shanghai&#x27;</span>)   |</span><br><span class="line">|-------------------------------------------------------------|</span><br><span class="line">| NULL                                                        |</span><br><span class="line">+-------------------------------------------------------------+</span><br></pre></td></tr></table></figure>

<p>果然，结果返回令人诧异的 <code>NULL</code></p>
<p>看了下 Django orm 的 datetimes 官方文档</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Note</span><br><span class="line">This function performs time zone conversions directly <span class="keyword">in</span> the database. As a consequence, your database must be able to interpret the value of tzinfo.tzname(<span class="literal">None</span>). This translates into the following requirements:</span><br><span class="line"></span><br><span class="line">SQLite: no requirements. Conversions are performed <span class="keyword">in</span> Python <span class="keyword">with</span> pytz (installed when you install Django).</span><br><span class="line">PostgreSQL: no requirements (see Time Zones).</span><br><span class="line">Oracle: no requirements (see Choosing a Time Zone File).</span><br><span class="line">MySQL: load the time zone tables <span class="keyword">with</span> mysql_tzinfo_to_sql.</span><br></pre></td></tr></table></figure>

<p>即 mysql 需要使用 mysql_tzinfo_to_sql 载入时区表，接着跳到 <a href="https://dev.mysql.com/doc/refman/8.0/en/mysql-tzinfo-to-sql.html">https://dev.mysql.com/doc/refman/8.0/en/mysql-tzinfo-to-sql.html</a></p>
<p>按照 mysql 官方的文档</p>
<p><code>For the first invocation syntax, pass the zoneinfo directory path name to mysql_tzinfo_to_sql and send the output into the mysql program. For example:</code></p>
<p>我需要按照以下命令执行</p>
<blockquote>
<p>mysql_tzinfo_to_sql &#x2F;usr&#x2F;share&#x2F;zoneinfo | mysql -u root mysql</p>
</blockquote>
<p>然后再次执行上面执行过的转换语句</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mysql root@localhost:py365&gt; select convert_tz(<span class="string">&#x27;2018-05-10 12:30:00&#x27;</span>, <span class="string">&#x27;UTC&#x27;</span>, <span class="string">&#x27;Asia/Shanghai&#x27;</span>);</span><br><span class="line">+-------------------------------------------------------------+</span><br><span class="line">| convert_tz(<span class="string">&#x27;2018-05-10 12:30:00&#x27;</span>, <span class="string">&#x27;UTC&#x27;</span>, <span class="string">&#x27;Asia/Shanghai&#x27;</span>)   |</span><br><span class="line">|-------------------------------------------------------------|</span><br><span class="line">| <span class="number">2018</span>-05-<span class="number">10</span> <span class="number">20</span>:<span class="number">30</span>:<span class="number">00</span>                                         |</span><br><span class="line">+-------------------------------------------------------------+</span><br></pre></td></tr></table></figure>

<p>yes，返回了正确的结果；</p>
<p>在 shell 中 执行数据库查询语句</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">45</span>]: Device.objects.datetimes(<span class="string">&#x27;latest_alarm_time&#x27;</span>, <span class="string">&#x27;month&#x27;</span>)</span><br><span class="line">Out[<span class="number">45</span>]: SELECT DISTINCT CAST(DATE_FORMAT(CONVERT_TZ(`device_device`.`latest_alarm_time`, <span class="string">&#x27;UTC&#x27;</span>, <span class="string">&#x27;Asia/Shanghai&#x27;</span>), <span class="string">&#x27;%Y-%m-01 00:00:00&#x27;</span>) AS DATETIME) AS `datetimefield` FROM `device_device` WHERE `device_device`.`latest_alarm_time` IS NOT NULL ORDER BY `datetimefield` ASC LIMIT <span class="number">21</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Execution time: <span class="number">0.000591</span>s [Database: default]</span><br><span class="line"></span><br><span class="line">&lt;QuerySet [datetime.datetime(<span class="number">2018</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, tzinfo=&lt;DstTzInfo <span class="string">&#x27;Asia/Shanghai&#x27;</span> CST+<span class="number">8</span>:<span class="number">00</span>:<span class="number">00</span> STD&gt;)]&gt;</span><br></pre></td></tr></table></figure>

<p>正常，so 问题解决，看来还得认真看文档呀</p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django | 虚拟字段</title>
    <url>/posts/37001/</url>
    <content><![CDATA[<p>这次写写 Django 模型中的虚拟字段。这个虚拟字段很有意思，在某些场景下，反查可以让业务代码看起来很清晰，大部分时候都是结合 <code>prefetch_related</code> 和 <code>select_related</code> 来使用。<span id="more"></span></p>
<h3 id="1-模型"><a href="#1-模型" class="headerlink" title="1 模型"></a>1 模型</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Category</span>(models.Model):</span><br><span class="line">    user = models.ForeignKey(</span><br><span class="line">        to=settings.AUTH_USER_MODEL,</span><br><span class="line">        on_delete=models.CASCADE,</span><br><span class="line">        related_name=<span class="string">&#x27;category_user&#x27;</span>,</span><br><span class="line">        null=<span class="literal">True</span>,</span><br><span class="line">        default=<span class="literal">None</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Article</span>(models.Model):</span><br><span class="line">    user = models.OneToOneField(to=settings.AUTH_USER_MODEL, on_delete=models.CASCADE)</span><br><span class="line">    category = models.ManyToManyField(Category)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span>(models.Model):</span><br><span class="line">    article = models.OneToOneField(</span><br><span class="line">        Article, on_delete=models.CASCADE, related_name=<span class="string">&#x27;books&#x27;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tag</span>(models.Model):</span><br><span class="line">    article = models.ForeignKey(Article, on_delete=models.CASCADE)</span><br><span class="line">    users = models.ManyToManyField(User, related_name=<span class="string">&#x27;tag_users&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>这里写了分类模型和文章模型，里面包含了基本的三种关系：</p>
<ul>
<li>OneToOneField</li>
<li>ForeignKey</li>
<li>ManyToManyField</li>
</ul>
<h3 id="2-模型中的虚拟字段"><a href="#2-模型中的虚拟字段" class="headerlink" title="2 模型中的虚拟字段"></a>2 模型中的虚拟字段</h3><p>虚拟字段一般存在于父模型中。对于上述三种关系，虚拟字段的名称都会受是否指定 <code>related_name</code> 的影响。</p>
<p><strong>规则 1：</strong></p>
<blockquote>
<p>如果引用模型指定了 related_name，那么父模型（被引用模型）存在指定的 related_name 名称的字段</p>
</blockquote>
<p><strong>规则 2：</strong></p>
<blockquote>
<p>如果没有指定 related_name，那么父模型（被引用模型）存在子模型小写名称的字段</p>
</blockquote>
<h4 id="2-1-OneToOneField-关系下的验证"><a href="#2-1-OneToOneField-关系下的验证" class="headerlink" title="2.1 OneToOneField 关系下的验证"></a>2.1 OneToOneField 关系下的验证</h4><h5 id="2-1-1-指定了-related-name"><a href="#2-1-1-指定了-related-name" class="headerlink" title="2.1.1 指定了 related_name"></a>2.1.1 指定了 related_name</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">5</span>]: Article._meta.get_field(<span class="string">&#x27;books&#x27;</span>)</span><br><span class="line">Out[<span class="number">5</span>]: &lt;OneToOneRel: mallshop.book&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: Article._meta.get_field(<span class="string">&#x27;books&#x27;</span>).concrete</span><br><span class="line">Out[<span class="number">7</span>]: <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p><code>Book</code> 模型引用了 <code>Article</code> 模型，同时指定了 <code>related_name</code>, 这时 <code>Article</code> 模型存在 <code>books</code> 的虚拟字段</p>
<h5 id="2-1-2-没有指定-related-name"><a href="#2-1-2-没有指定-related-name" class="headerlink" title="2.1.2 没有指定 related_name"></a>2.1.2 没有指定 related_name</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">8</span>]: User._meta.get_field(<span class="string">&#x27;article&#x27;</span>)</span><br><span class="line">Out[<span class="number">8</span>]: &lt;OneToOneRel: mallshop.article&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: User._meta.get_field(<span class="string">&#x27;article&#x27;</span>).concrete</span><br><span class="line">Out[<span class="number">9</span>]: <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p><code>Article</code> 模型引用了 <code>User</code> 模型，没有指定 <code>related_name</code>，这时 <code>User</code> 模型存在 <code>artilce</code> 虚拟字段</p>
<h4 id="2-2-ForeignKey-关系下的验证"><a href="#2-2-ForeignKey-关系下的验证" class="headerlink" title="2.2 ForeignKey 关系下的验证"></a>2.2 ForeignKey 关系下的验证</h4><h5 id="2-2-1-指定了-related-name"><a href="#2-2-1-指定了-related-name" class="headerlink" title="2.2.1 指定了 related_name"></a>2.2.1 指定了 related_name</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">10</span>]: User._meta.get_field(<span class="string">&#x27;category_user&#x27;</span>)</span><br><span class="line">Out[<span class="number">10</span>]: &lt;ManyToOneRel: mallshop.category&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: User._meta.get_field(<span class="string">&#x27;category_user&#x27;</span>).concrete</span><br><span class="line">Out[<span class="number">11</span>]: <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p><code>Category</code> 模型引用了 <code>User</code> 模型，同时指定了 <code>related_name</code>, 这时 <code>User</code> 模型存在 <code>category_user</code> 的虚拟字段</p>
<h5 id="2-2-2-没有指定-related-name"><a href="#2-2-2-没有指定-related-name" class="headerlink" title="2.2.2 没有指定 related_name"></a>2.2.2 没有指定 related_name</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">12</span>]: Article._meta.get_field(<span class="string">&#x27;tag&#x27;</span>)</span><br><span class="line">Out[<span class="number">12</span>]: &lt;ManyToOneRel: mallshop.tag&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: Article._meta.get_field(<span class="string">&#x27;tag&#x27;</span>).concrete</span><br><span class="line">Out[<span class="number">13</span>]: <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p><code>Tag</code> 模型引用了 <code>Article 模型</code>，没有指定 <code>related_name</code>，这时 <code>Article</code> 模型存在 <code>tag</code> 虚拟字段</p>
<h4 id="2-3-ManyToManyField-关系下的验证"><a href="#2-3-ManyToManyField-关系下的验证" class="headerlink" title="2.3 ManyToManyField 关系下的验证"></a>2.3 ManyToManyField 关系下的验证</h4><h5 id="2-3-1-指定了-related-name"><a href="#2-3-1-指定了-related-name" class="headerlink" title="2.3.1 指定了 related_name"></a>2.3.1 指定了 related_name</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: User._meta.get_field(<span class="string">&#x27;tag_users&#x27;</span>)</span><br><span class="line">Out[<span class="number">1</span>]: &lt;ManyToManyRel: mallshop.tag&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: User._meta.get_field(<span class="string">&#x27;tag_users&#x27;</span>).concrete</span><br><span class="line">Out[<span class="number">2</span>]: <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p><code>Tag</code> 模型引用了 <code>User</code> 模型，同时指定了 <code>related_name</code> 为 <code>tag_users</code>, 这时 <code>User</code> 模型存在 <code>tag_users</code> 的虚拟字段</p>
<h5 id="2-3-2-没有指定-related-name"><a href="#2-3-2-没有指定-related-name" class="headerlink" title="2.3.2 没有指定 related_name"></a>2.3.2 没有指定 related_name</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">15</span>]: Category._meta.get_field(<span class="string">&#x27;article&#x27;</span>)</span><br><span class="line">Out[<span class="number">15</span>]: &lt;ManyToManyRel: mallshop.article&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">16</span>]: Category._meta.get_field(<span class="string">&#x27;article&#x27;</span>).concrete</span><br><span class="line">Out[<span class="number">16</span>]: <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p><code>Article</code> 模型引用了 <code>Category</code> 模型，没有指定 <code>related_name</code>，这时 <code>Category</code> 模型存在 <code>article</code> 虚拟字段</p>
<h3 id="3-模型实例访问虚拟字段"><a href="#3-模型实例访问虚拟字段" class="headerlink" title="3 模型实例访问虚拟字段"></a>3 模型实例访问虚拟字段</h3><p>如果在模型实例，访问虚拟字段时，这里需要注意以下规则：</p>
<p><strong>规则 1：</strong></p>
<blockquote>
<p>如果是 OneToOneField 关系，访问模型实例的虚拟字段属性时，这时返回的是子模型的实例</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">3</span>]: user = User.objects.first()</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: user.article</span><br><span class="line">Out[<span class="number">4</span>]: &lt;Article: Article <span class="built_in">object</span> (<span class="number">1</span>)&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: user.article.books</span><br><span class="line">Out[<span class="number">5</span>]: &lt;Book: Book <span class="built_in">object</span> (<span class="number">1</span>)&gt;</span><br></pre></td></tr></table></figure>

<p><strong>规则 2：</strong></p>
<blockquote>
<p>如果是非 OneToOneField 关系，同时指定了 related_name，访问模型实例的虚拟字段属性时，这时返回的是 RelatedManager 实例</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">9</span>]: user.category_user</span><br><span class="line">Out[<span class="number">9</span>]: &lt;django.db.models.fields.related_descriptors.create_reverse_many_to_one_manager.&lt;<span class="built_in">locals</span>&gt;.RelatedManager at <span class="number">0x107c10610</span>&gt;</span><br></pre></td></tr></table></figure>

<p><strong>规则 3：</strong></p>
<blockquote>
<p>如果是非 OneToOneField 关系，同时没有指定 related_name，访问模型实例的虚拟字段属性时，这个时候会抛出异常，如果想得到一个 RelatedManager 实例，则需要在虚拟字段后加上 _set 后，在进行访问</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">6</span>]: article = Article.objects.first()</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: article.tag</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">AttributeError                            Traceback (most recent call last)</span><br><span class="line">&lt;ipython-<span class="built_in">input</span>-<span class="number">7</span>-ad987724bf64&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; <span class="number">1</span> article.tag</span><br><span class="line"></span><br><span class="line">AttributeError: <span class="string">&#x27;Article&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;tag&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: article.tag_set</span><br><span class="line">Out[<span class="number">8</span>]: &lt;django.db.models.fields.related_descriptors.create_reverse_many_to_one_manager.&lt;<span class="built_in">locals</span>&gt;.RelatedManager at <span class="number">0x108053220</span>&gt;</span><br></pre></td></tr></table></figure>

<h3 id="4-小结"><a href="#4-小结" class="headerlink" title="4 小结"></a>4 小结</h3><p>虚拟字段，注意在模型和模型实例下的使用方式。</p>
<p>话说虚拟字段有啥用，可以反查，在我使用的场景中，最大的好处是可以基于 <code>DRF</code> 动态构建序列化类，例如想得到一篇文章，这个文章还要包含些作者信息，前端可以这样传</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;display_fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;id&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;name&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;username&quot;</span><span class="punctuation">,</span> <span class="string">&quot;id&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;id&quot;</span><span class="punctuation">,</span> <span class="string">&quot;name&quot;</span><span class="punctuation">]</span> <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>返回的结果</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ceshi1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;吴小楠&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tag&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tag1&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>后端可以根据前端传递的获取字段列表进行校验，验证通过后根据获取的字段动态的生成对应的序列化类，嵌套的序列化类也只包含指定的字段，这样在服务端可以提升些接口性能。返回给前端，这个我是参考了 <code>graphql</code> 的模式，前端需要返回什么，就指定什么。</p>
<p>如果使用 Django，虚拟字段的使用时避免不了的，深度挖掘虚拟字段的使用，会跟业务带来很大的便利性。</p>
]]></content>
      <categories>
        <category>后端</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>资源加速系列之 pip</title>
    <url>/posts/26327/</url>
    <content><![CDATA[<p>在 <code>python</code> 项目中，安装包时，都会从官方默认的源：<span id="more"></span></p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">https:</span>//pypi<span class="meta">.org</span>/simple</span><br></pre></td></tr></table></figure>

<p>中下载，速度较慢，原因不多说了，针对这个情况，国内有些公司和机构做了镜像站，以便国内的用户提高下载速度。</p>
<!--more-->

<h3 id="1-国内的镜像源列表"><a href="#1-国内的镜像源列表" class="headerlink" title="1 国内的镜像源列表"></a>1 国内的镜像源列表</h3><p>列举几个常用的，少用的就不列了</p>
<ul>
<li><a href="https://mirrors.aliyun.com/pypi/simple/">https://mirrors.aliyun.com/pypi/simple/</a> 阿里云</li>
<li><a href="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/</a> 清华大学</li>
<li><a href="https://pypi.doubanio.com/simple/">https://pypi.doubanio.com/simple/</a> 豆瓣</li>
<li><a href="https://mirrors.ustc.edu.cn/pypi/web/simple/">https://mirrors.ustc.edu.cn/pypi/web/simple/</a> 中国科学技术大学</li>
</ul>
<p>上面的源站都测试过，对我来说，首选阿里云，因为确实快</p>
<h3 id="2-临时指定镜像源"><a href="#2-临时指定镜像源" class="headerlink" title="2 临时指定镜像源"></a>2 临时指定镜像源</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> -i 镜像源地址 包名称</span><br></pre></td></tr></table></figure>

<p>例如安装 <code>django</code>，选用阿里云镜像源，则</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">pip install -i https:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/pypi/</span>simple/ django</span><br></pre></td></tr></table></figure>

<h3 id="3-全局设置镜像源"><a href="#3-全局设置镜像源" class="headerlink" title="3 全局设置镜像源"></a>3 全局设置镜像源</h3><p>我个人使用的是 mac，步骤：</p>
<p>1 在用户主目录下 <code>~/.config</code> 中新建 <code>pip</code> 文件夹（也可以直接在用户主目录下建立 <code>.pip</code> 文件夹)</p>
<p>2 在上一步新建的文件中新建 <code>pip.conf</code></p>
<p>3 在 <code>pip.conf</code> 文件中添加以下配置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">global</span>]</span><br><span class="line">timeout = <span class="number">60</span></span><br><span class="line">index-url = https://mirrors.aliyun.com/pypi/simple</span><br><span class="line"></span><br><span class="line">[install]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure>

<p>可以阅览官方文档：<a href="https://pip.pypa.io/en/stable/user_guide/#config-file">https://pip.pypa.io/en/stable/user_guide/#config-file</a></p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">You can <span class="built_in">set</span> <span class="keyword">a</span> custom path location <span class="keyword">for</span> this config</span><br><span class="line"><span class="built_in">file</span> <span class="keyword">using</span> <span class="keyword">the</span> environment <span class="built_in">variable</span> PIP_CONFIG_FILE.</span><br></pre></td></tr></table></figure>

<p>用户可以自定义配置文件路径，配置好环境变量 <code>PIP_CONFIG_FILE</code> 即可。</p>
<p>后续再安装 <code>python</code> 包都会使用设置好的源，节省时间。</p>
]]></content>
      <categories>
        <category>资源加速</category>
        <category>后端</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>加速</tag>
        <tag>镜像</tag>
      </tags>
  </entry>
  <entry>
    <title>资源加速系列之 pyenv</title>
    <url>/posts/22631/</url>
    <content><![CDATA[<p>对于 <code>python</code> 相关的业务，我都是使用 <code>pyenv</code>，来管理我本地的 <code>python</code> 版本，由于不同项目的需要，有些项目使用的 <code>python</code> 版本都是不一致，所以本地安装了不同的版本。<span id="more"></span></p>
<h3 id="1-加速"><a href="#1-加速" class="headerlink" title="1 加速"></a>1 加速</h3><p>刚开始装 <code>python</code>，都是执行 <code>pyenv install 版本号</code> 进行安装，但是发现速度，在国内，你懂得，太慢，所以就去找镜像，我使用了淘宝的镜像，地址如下</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">https:</span>//npm.taobao<span class="meta">.org</span>/mirrors/python/</span><br></pre></td></tr></table></figure>

<p>其实加速就是从镜像地址把指定版本的 <code>python</code> 压缩包下载到 <code>~/.pyenv/cache</code> 下面，然后执行 <code>pyenv install 对应的版本号</code> 即可。</p>
<p>例如安装 3.6.7 版本，命令行如下</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">v=<span class="number">3.6</span>.<span class="number">7</span>;wget https:<span class="regexp">//</span>npm.taobao.org<span class="regexp">/mirrors/</span>python<span class="regexp">/$v/</span>Python-<span class="variable">$v</span>.tar.xz -P ~<span class="regexp">/.pyenv/</span>cache/;pyenv install <span class="variable">$v</span></span><br></pre></td></tr></table></figure>

<h3 id="2-做成可执行文件"><a href="#2-做成可执行文件" class="headerlink" title="2 做成可执行文件"></a>2 做成可执行文件</h3><p>我个人是有懒癌的，如果每次安装其他版本，都要这么执行，输入一长串，受不鸟，那就封装成 <code>shell</code> 脚本，脚本如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">pyenvInstallPython</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$1</span></span><br><span class="line">    v=<span class="variable">$1</span></span><br><span class="line">    wget https://npm.taobao.org/mirrors/python/<span class="variable">$v</span>/Python-<span class="variable">$v</span>.tar.xz -P ~/.pyenv/cache/;pyenv install <span class="variable">$v</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pyenvInstallPython $*</span><br></pre></td></tr></table></figure>

<p>然后把这个脚本写到可执行文件（我起的名字叫做 <code>pyversion</code>)中，然后把可执行文件移动到可执行目录中（即能在 <code>$PATH</code> 指定的路径中找到这个文件），我个人的做法，在我的用户目录建立了一个 <code>bin</code> 目录（加入到 <code>$PATH</code> 中去），然后把 <code>pyversion</code> 这个可执行文件移动到 <code>~/bin</code> 中去。</p>
<p>好了，可以了，后面想安装对应的版本，直接在终端中执行</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">pyversion</span> 版本号</span><br></pre></td></tr></table></figure>

<h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3 测试"></a>3 测试</h3><p>例如我要装 3.6.7 版本，在终端执行 <code>pyversion 3.6.7</code>，执行结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">3.6.7</span><br><span class="line">--2016-10-22 01:16:10--  https://npm.taobao.org/mirrors/python/3.6.7/Python-3.6.7.tar.xz</span><br><span class="line">正在解析主机 npm.taobao.org (npm.taobao.org)... 114.55.80.225</span><br><span class="line">正在连接 npm.taobao.org (npm.taobao.org)|114.55.80.225|:443... 已连接。</span><br><span class="line">已发出 HTTP 请求，正在等待回应... 302 Found</span><br><span class="line">位置：https://cdn.npm.taobao.org/dist/python/3.6.7/Python-3.6.7.tar.xz [跟随至新的 URL]</span><br><span class="line">--2016-10-22 01:16:10--  https://cdn.npm.taobao.org/dist/python/3.6.7/Python-3.6.7.tar.xz</span><br><span class="line">正在解析主机 cdn.npm.taobao.org (cdn.npm.taobao.org)... 119.147.111.226, 119.147.111.229, 113.105.168.156, ...</span><br><span class="line">正在连接 cdn.npm.taobao.org (cdn.npm.taobao.org)|119.147.111.226|:443... 已连接。</span><br><span class="line">已发出 HTTP 请求，正在等待回应... 200 OK</span><br><span class="line">长度：17178476 (16M) [application/x-xz]</span><br><span class="line">正在保存至: “/Users/kycool/.pyenv/cache/Python-3.6.7.tar.xz”</span><br><span class="line"></span><br><span class="line">Python-3.6.7.tar.xz              100%[========================================================&gt;]  16.38M  8.36MB/s  用时 2.0s</span><br><span class="line"></span><br><span class="line">2016-10-22 01:16:12 (8.36 MB/s) - 已保存 “/Users/kycool/.pyenv/cache/Python-3.6.7.tar.xz” [17178476/17178476])</span><br><span class="line"></span><br><span class="line">python-build: use openssl@1.1 from homebrew</span><br><span class="line">python-build: use readline from homebrew</span><br><span class="line">Installing Python-3.6.7...</span><br><span class="line">python-build: use readline from homebrew</span><br><span class="line">python-build: use zlib from xcode sdk</span><br><span class="line">Installed Python-3.6.7 to /Users/kycool/.pyenv/versions/3.6.7</span><br></pre></td></tr></table></figure>

<p>速度果然是杠杠的，再输入 <code>pyenv versions</code> 看下</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">$ pyenv versions</span><br><span class="line">* <span class="keyword">system</span> (<span class="built_in">set</span> <span class="keyword">by</span> /Users/kycool/.pyenv/<span class="built_in">version</span>)</span><br><span class="line">  <span class="number">3.6</span><span class="number">.0</span></span><br><span class="line">  <span class="number">3.6</span><span class="number">.7</span></span><br></pre></td></tr></table></figure>

<p>可以，后续就可以这样玩了，省时省力。</p>
]]></content>
      <categories>
        <category>资源加速</category>
        <category>后端</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>加速</tag>
        <tag>镜像</tag>
      </tags>
  </entry>
</search>
